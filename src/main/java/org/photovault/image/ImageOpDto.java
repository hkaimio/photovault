// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_op_dto.proto

package org.photovault.image;

public final class ImageOpDto {
  private ImageOpDto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class ImageOpChain extends
      com.google.protobuf.GeneratedMessage {
    // Use ImageOpChain.newBuilder() to construct.
    private ImageOpChain() {
      initFields();
    }
    private ImageOpChain(boolean noInit) {}
    
    private static final ImageOpChain defaultInstance;
    public static ImageOpChain getDefaultInstance() {
      return defaultInstance;
    }
    
    public ImageOpChain getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.image.ImageOpDto.internal_static_ImageOpChain_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.image.ImageOpDto.internal_static_ImageOpChain_fieldAccessorTable;
    }
    
    // required string head = 1;
    public static final int HEAD_FIELD_NUMBER = 1;
    private boolean hasHead;
    private java.lang.String head_ = "";
    public boolean hasHead() { return hasHead; }
    public java.lang.String getHead() { return head_; }
    
    // repeated .ImageOp operations = 2;
    public static final int OPERATIONS_FIELD_NUMBER = 2;
    private java.util.List<org.photovault.image.ImageOpDto.ImageOp> operations_ =
      java.util.Collections.emptyList();
    public java.util.List<org.photovault.image.ImageOpDto.ImageOp> getOperationsList() {
      return operations_;
    }
    public int getOperationsCount() { return operations_.size(); }
    public org.photovault.image.ImageOpDto.ImageOp getOperations(int index) {
      return operations_.get(index);
    }
    
    // repeated .Link links = 3;
    public static final int LINKS_FIELD_NUMBER = 3;
    private java.util.List<org.photovault.image.ImageOpDto.Link> links_ =
      java.util.Collections.emptyList();
    public java.util.List<org.photovault.image.ImageOpDto.Link> getLinksList() {
      return links_;
    }
    public int getLinksCount() { return links_.size(); }
    public org.photovault.image.ImageOpDto.Link getLinks(int index) {
      return links_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasHead) return false;
      for (org.photovault.image.ImageOpDto.ImageOp element : getOperationsList()) {
        if (!element.isInitialized()) return false;
      }
      for (org.photovault.image.ImageOpDto.Link element : getLinksList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasHead()) {
        output.writeString(1, getHead());
      }
      for (org.photovault.image.ImageOpDto.ImageOp element : getOperationsList()) {
        output.writeMessage(2, element);
      }
      for (org.photovault.image.ImageOpDto.Link element : getLinksList()) {
        output.writeMessage(3, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasHead()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getHead());
      }
      for (org.photovault.image.ImageOpDto.ImageOp element : getOperationsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      for (org.photovault.image.ImageOpDto.Link element : getLinksList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.image.ImageOpDto.ImageOpChain parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOpChain parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOpChain parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOpChain parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOpChain parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOpChain parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOpChain parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.ImageOpChain parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.ImageOpChain parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOpChain parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.image.ImageOpDto.ImageOpChain prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.image.ImageOpDto.ImageOpChain result;
      
      // Construct using org.photovault.image.ImageOpDto.ImageOpChain.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.image.ImageOpDto.ImageOpChain();
        return builder;
      }
      
      protected org.photovault.image.ImageOpDto.ImageOpChain internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.image.ImageOpDto.ImageOpChain();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.image.ImageOpDto.ImageOpChain.getDescriptor();
      }
      
      public org.photovault.image.ImageOpDto.ImageOpChain getDefaultInstanceForType() {
        return org.photovault.image.ImageOpDto.ImageOpChain.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.image.ImageOpDto.ImageOpChain build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.image.ImageOpDto.ImageOpChain buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.image.ImageOpDto.ImageOpChain buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.operations_ != java.util.Collections.EMPTY_LIST) {
          result.operations_ =
            java.util.Collections.unmodifiableList(result.operations_);
        }
        if (result.links_ != java.util.Collections.EMPTY_LIST) {
          result.links_ =
            java.util.Collections.unmodifiableList(result.links_);
        }
        org.photovault.image.ImageOpDto.ImageOpChain returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.image.ImageOpDto.ImageOpChain) {
          return mergeFrom((org.photovault.image.ImageOpDto.ImageOpChain)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.image.ImageOpDto.ImageOpChain other) {
        if (other == org.photovault.image.ImageOpDto.ImageOpChain.getDefaultInstance()) return this;
        if (other.hasHead()) {
          setHead(other.getHead());
        }
        if (!other.operations_.isEmpty()) {
          if (result.operations_.isEmpty()) {
            result.operations_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.ImageOp>();
          }
          result.operations_.addAll(other.operations_);
        }
        if (!other.links_.isEmpty()) {
          if (result.links_.isEmpty()) {
            result.links_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.Link>();
          }
          result.links_.addAll(other.links_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setHead(input.readString());
              break;
            }
            case 18: {
              org.photovault.image.ImageOpDto.ImageOp.Builder subBuilder = org.photovault.image.ImageOpDto.ImageOp.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addOperations(subBuilder.buildPartial());
              break;
            }
            case 26: {
              org.photovault.image.ImageOpDto.Link.Builder subBuilder = org.photovault.image.ImageOpDto.Link.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addLinks(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required string head = 1;
      public boolean hasHead() {
        return result.hasHead();
      }
      public java.lang.String getHead() {
        return result.getHead();
      }
      public Builder setHead(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasHead = true;
        result.head_ = value;
        return this;
      }
      public Builder clearHead() {
        result.hasHead = false;
        result.head_ = getDefaultInstance().getHead();
        return this;
      }
      
      // repeated .ImageOp operations = 2;
      public java.util.List<org.photovault.image.ImageOpDto.ImageOp> getOperationsList() {
        return java.util.Collections.unmodifiableList(result.operations_);
      }
      public int getOperationsCount() {
        return result.getOperationsCount();
      }
      public org.photovault.image.ImageOpDto.ImageOp getOperations(int index) {
        return result.getOperations(index);
      }
      public Builder setOperations(int index, org.photovault.image.ImageOpDto.ImageOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.operations_.set(index, value);
        return this;
      }
      public Builder setOperations(int index, org.photovault.image.ImageOpDto.ImageOp.Builder builderForValue) {
        result.operations_.set(index, builderForValue.build());
        return this;
      }
      public Builder addOperations(org.photovault.image.ImageOpDto.ImageOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.operations_.isEmpty()) {
          result.operations_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.ImageOp>();
        }
        result.operations_.add(value);
        return this;
      }
      public Builder addOperations(org.photovault.image.ImageOpDto.ImageOp.Builder builderForValue) {
        if (result.operations_.isEmpty()) {
          result.operations_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.ImageOp>();
        }
        result.operations_.add(builderForValue.build());
        return this;
      }
      public Builder addAllOperations(
          java.lang.Iterable<? extends org.photovault.image.ImageOpDto.ImageOp> values) {
        if (result.operations_.isEmpty()) {
          result.operations_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.ImageOp>();
        }
        super.addAll(values, result.operations_);
        return this;
      }
      public Builder clearOperations() {
        result.operations_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .Link links = 3;
      public java.util.List<org.photovault.image.ImageOpDto.Link> getLinksList() {
        return java.util.Collections.unmodifiableList(result.links_);
      }
      public int getLinksCount() {
        return result.getLinksCount();
      }
      public org.photovault.image.ImageOpDto.Link getLinks(int index) {
        return result.getLinks(index);
      }
      public Builder setLinks(int index, org.photovault.image.ImageOpDto.Link value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.links_.set(index, value);
        return this;
      }
      public Builder setLinks(int index, org.photovault.image.ImageOpDto.Link.Builder builderForValue) {
        result.links_.set(index, builderForValue.build());
        return this;
      }
      public Builder addLinks(org.photovault.image.ImageOpDto.Link value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.links_.isEmpty()) {
          result.links_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.Link>();
        }
        result.links_.add(value);
        return this;
      }
      public Builder addLinks(org.photovault.image.ImageOpDto.Link.Builder builderForValue) {
        if (result.links_.isEmpty()) {
          result.links_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.Link>();
        }
        result.links_.add(builderForValue.build());
        return this;
      }
      public Builder addAllLinks(
          java.lang.Iterable<? extends org.photovault.image.ImageOpDto.Link> values) {
        if (result.links_.isEmpty()) {
          result.links_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.Link>();
        }
        super.addAll(values, result.links_);
        return this;
      }
      public Builder clearLinks() {
        result.links_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:ImageOpChain)
    }
    
    static {
      defaultInstance = new ImageOpChain(true);
      org.photovault.image.ImageOpDto.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:ImageOpChain)
  }
  
  public static final class Link extends
      com.google.protobuf.GeneratedMessage {
    // Use Link.newBuilder() to construct.
    private Link() {
      initFields();
    }
    private Link(boolean noInit) {}
    
    private static final Link defaultInstance;
    public static Link getDefaultInstance() {
      return defaultInstance;
    }
    
    public Link getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.image.ImageOpDto.internal_static_Link_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.image.ImageOpDto.internal_static_Link_fieldAccessorTable;
    }
    
    // required string source = 1;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private boolean hasSource;
    private java.lang.String source_ = "";
    public boolean hasSource() { return hasSource; }
    public java.lang.String getSource() { return source_; }
    
    // required string sink = 2;
    public static final int SINK_FIELD_NUMBER = 2;
    private boolean hasSink;
    private java.lang.String sink_ = "";
    public boolean hasSink() { return hasSink; }
    public java.lang.String getSink() { return sink_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasSource) return false;
      if (!hasSink) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSource()) {
        output.writeString(1, getSource());
      }
      if (hasSink()) {
        output.writeString(2, getSink());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSource()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSource());
      }
      if (hasSink()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getSink());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.image.ImageOpDto.Link parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Link parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Link parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Link parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Link parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Link parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Link parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.Link parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.Link parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Link parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.image.ImageOpDto.Link prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.image.ImageOpDto.Link result;
      
      // Construct using org.photovault.image.ImageOpDto.Link.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.image.ImageOpDto.Link();
        return builder;
      }
      
      protected org.photovault.image.ImageOpDto.Link internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.image.ImageOpDto.Link();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.image.ImageOpDto.Link.getDescriptor();
      }
      
      public org.photovault.image.ImageOpDto.Link getDefaultInstanceForType() {
        return org.photovault.image.ImageOpDto.Link.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.image.ImageOpDto.Link build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.image.ImageOpDto.Link buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.image.ImageOpDto.Link buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.image.ImageOpDto.Link returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.image.ImageOpDto.Link) {
          return mergeFrom((org.photovault.image.ImageOpDto.Link)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.image.ImageOpDto.Link other) {
        if (other == org.photovault.image.ImageOpDto.Link.getDefaultInstance()) return this;
        if (other.hasSource()) {
          setSource(other.getSource());
        }
        if (other.hasSink()) {
          setSink(other.getSink());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setSource(input.readString());
              break;
            }
            case 18: {
              setSink(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string source = 1;
      public boolean hasSource() {
        return result.hasSource();
      }
      public java.lang.String getSource() {
        return result.getSource();
      }
      public Builder setSource(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder clearSource() {
        result.hasSource = false;
        result.source_ = getDefaultInstance().getSource();
        return this;
      }
      
      // required string sink = 2;
      public boolean hasSink() {
        return result.hasSink();
      }
      public java.lang.String getSink() {
        return result.getSink();
      }
      public Builder setSink(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSink = true;
        result.sink_ = value;
        return this;
      }
      public Builder clearSink() {
        result.hasSink = false;
        result.sink_ = getDefaultInstance().getSink();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Link)
    }
    
    static {
      defaultInstance = new Link(true);
      org.photovault.image.ImageOpDto.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Link)
  }
  
  public static final class ImageOp extends
      com.google.protobuf.GeneratedMessage {
    // Use ImageOp.newBuilder() to construct.
    private ImageOp() {
      initFields();
    }
    private ImageOp(boolean noInit) {}
    
    private static final ImageOp defaultInstance;
    public static ImageOp getDefaultInstance() {
      return defaultInstance;
    }
    
    public ImageOp getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.image.ImageOpDto.internal_static_ImageOp_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.image.ImageOpDto.internal_static_ImageOp_fieldAccessorTable;
    }
    
    // required string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // optional .DCRawOp rawOp = 2;
    public static final int RAWOP_FIELD_NUMBER = 2;
    private boolean hasRawOp;
    private org.photovault.image.ImageOpDto.DCRawOp rawOp_;
    public boolean hasRawOp() { return hasRawOp; }
    public org.photovault.image.ImageOpDto.DCRawOp getRawOp() { return rawOp_; }
    
    // optional .DCRawMapOp rawMapOp = 3;
    public static final int RAWMAPOP_FIELD_NUMBER = 3;
    private boolean hasRawMapOp;
    private org.photovault.image.ImageOpDto.DCRawMapOp rawMapOp_;
    public boolean hasRawMapOp() { return hasRawMapOp; }
    public org.photovault.image.ImageOpDto.DCRawMapOp getRawMapOp() { return rawMapOp_; }
    
    // optional .ChanMapOp chanMapOp = 4;
    public static final int CHANMAPOP_FIELD_NUMBER = 4;
    private boolean hasChanMapOp;
    private org.photovault.image.ImageOpDto.ChanMapOp chanMapOp_;
    public boolean hasChanMapOp() { return hasChanMapOp; }
    public org.photovault.image.ImageOpDto.ChanMapOp getChanMapOp() { return chanMapOp_; }
    
    // optional .CropOp cropOp = 5;
    public static final int CROPOP_FIELD_NUMBER = 5;
    private boolean hasCropOp;
    private org.photovault.image.ImageOpDto.CropOp cropOp_;
    public boolean hasCropOp() { return hasCropOp; }
    public org.photovault.image.ImageOpDto.CropOp getCropOp() { return cropOp_; }
    
    private void initFields() {
      rawOp_ = org.photovault.image.ImageOpDto.DCRawOp.getDefaultInstance();
      rawMapOp_ = org.photovault.image.ImageOpDto.DCRawMapOp.getDefaultInstance();
      chanMapOp_ = org.photovault.image.ImageOpDto.ChanMapOp.getDefaultInstance();
      cropOp_ = org.photovault.image.ImageOpDto.CropOp.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasName) return false;
      if (hasRawOp()) {
        if (!getRawOp().isInitialized()) return false;
      }
      if (hasRawMapOp()) {
        if (!getRawMapOp().isInitialized()) return false;
      }
      if (hasChanMapOp()) {
        if (!getChanMapOp().isInitialized()) return false;
      }
      if (hasCropOp()) {
        if (!getCropOp().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      if (hasRawOp()) {
        output.writeMessage(2, getRawOp());
      }
      if (hasRawMapOp()) {
        output.writeMessage(3, getRawMapOp());
      }
      if (hasChanMapOp()) {
        output.writeMessage(4, getChanMapOp());
      }
      if (hasCropOp()) {
        output.writeMessage(5, getCropOp());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      if (hasRawOp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getRawOp());
      }
      if (hasRawMapOp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getRawMapOp());
      }
      if (hasChanMapOp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getChanMapOp());
      }
      if (hasCropOp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getCropOp());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.image.ImageOpDto.ImageOp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.ImageOp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.ImageOp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ImageOp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.image.ImageOpDto.ImageOp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.image.ImageOpDto.ImageOp result;
      
      // Construct using org.photovault.image.ImageOpDto.ImageOp.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.image.ImageOpDto.ImageOp();
        return builder;
      }
      
      protected org.photovault.image.ImageOpDto.ImageOp internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.image.ImageOpDto.ImageOp();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.image.ImageOpDto.ImageOp.getDescriptor();
      }
      
      public org.photovault.image.ImageOpDto.ImageOp getDefaultInstanceForType() {
        return org.photovault.image.ImageOpDto.ImageOp.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.image.ImageOpDto.ImageOp build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.image.ImageOpDto.ImageOp buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.image.ImageOpDto.ImageOp buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.image.ImageOpDto.ImageOp returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.image.ImageOpDto.ImageOp) {
          return mergeFrom((org.photovault.image.ImageOpDto.ImageOp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.image.ImageOpDto.ImageOp other) {
        if (other == org.photovault.image.ImageOpDto.ImageOp.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasRawOp()) {
          mergeRawOp(other.getRawOp());
        }
        if (other.hasRawMapOp()) {
          mergeRawMapOp(other.getRawMapOp());
        }
        if (other.hasChanMapOp()) {
          mergeChanMapOp(other.getChanMapOp());
        }
        if (other.hasCropOp()) {
          mergeCropOp(other.getCropOp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 18: {
              org.photovault.image.ImageOpDto.DCRawOp.Builder subBuilder = org.photovault.image.ImageOpDto.DCRawOp.newBuilder();
              if (hasRawOp()) {
                subBuilder.mergeFrom(getRawOp());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRawOp(subBuilder.buildPartial());
              break;
            }
            case 26: {
              org.photovault.image.ImageOpDto.DCRawMapOp.Builder subBuilder = org.photovault.image.ImageOpDto.DCRawMapOp.newBuilder();
              if (hasRawMapOp()) {
                subBuilder.mergeFrom(getRawMapOp());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRawMapOp(subBuilder.buildPartial());
              break;
            }
            case 34: {
              org.photovault.image.ImageOpDto.ChanMapOp.Builder subBuilder = org.photovault.image.ImageOpDto.ChanMapOp.newBuilder();
              if (hasChanMapOp()) {
                subBuilder.mergeFrom(getChanMapOp());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setChanMapOp(subBuilder.buildPartial());
              break;
            }
            case 42: {
              org.photovault.image.ImageOpDto.CropOp.Builder subBuilder = org.photovault.image.ImageOpDto.CropOp.newBuilder();
              if (hasCropOp()) {
                subBuilder.mergeFrom(getCropOp());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCropOp(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required string name = 1;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // optional .DCRawOp rawOp = 2;
      public boolean hasRawOp() {
        return result.hasRawOp();
      }
      public org.photovault.image.ImageOpDto.DCRawOp getRawOp() {
        return result.getRawOp();
      }
      public Builder setRawOp(org.photovault.image.ImageOpDto.DCRawOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRawOp = true;
        result.rawOp_ = value;
        return this;
      }
      public Builder setRawOp(org.photovault.image.ImageOpDto.DCRawOp.Builder builderForValue) {
        result.hasRawOp = true;
        result.rawOp_ = builderForValue.build();
        return this;
      }
      public Builder mergeRawOp(org.photovault.image.ImageOpDto.DCRawOp value) {
        if (result.hasRawOp() &&
            result.rawOp_ != org.photovault.image.ImageOpDto.DCRawOp.getDefaultInstance()) {
          result.rawOp_ =
            org.photovault.image.ImageOpDto.DCRawOp.newBuilder(result.rawOp_).mergeFrom(value).buildPartial();
        } else {
          result.rawOp_ = value;
        }
        result.hasRawOp = true;
        return this;
      }
      public Builder clearRawOp() {
        result.hasRawOp = false;
        result.rawOp_ = org.photovault.image.ImageOpDto.DCRawOp.getDefaultInstance();
        return this;
      }
      
      // optional .DCRawMapOp rawMapOp = 3;
      public boolean hasRawMapOp() {
        return result.hasRawMapOp();
      }
      public org.photovault.image.ImageOpDto.DCRawMapOp getRawMapOp() {
        return result.getRawMapOp();
      }
      public Builder setRawMapOp(org.photovault.image.ImageOpDto.DCRawMapOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRawMapOp = true;
        result.rawMapOp_ = value;
        return this;
      }
      public Builder setRawMapOp(org.photovault.image.ImageOpDto.DCRawMapOp.Builder builderForValue) {
        result.hasRawMapOp = true;
        result.rawMapOp_ = builderForValue.build();
        return this;
      }
      public Builder mergeRawMapOp(org.photovault.image.ImageOpDto.DCRawMapOp value) {
        if (result.hasRawMapOp() &&
            result.rawMapOp_ != org.photovault.image.ImageOpDto.DCRawMapOp.getDefaultInstance()) {
          result.rawMapOp_ =
            org.photovault.image.ImageOpDto.DCRawMapOp.newBuilder(result.rawMapOp_).mergeFrom(value).buildPartial();
        } else {
          result.rawMapOp_ = value;
        }
        result.hasRawMapOp = true;
        return this;
      }
      public Builder clearRawMapOp() {
        result.hasRawMapOp = false;
        result.rawMapOp_ = org.photovault.image.ImageOpDto.DCRawMapOp.getDefaultInstance();
        return this;
      }
      
      // optional .ChanMapOp chanMapOp = 4;
      public boolean hasChanMapOp() {
        return result.hasChanMapOp();
      }
      public org.photovault.image.ImageOpDto.ChanMapOp getChanMapOp() {
        return result.getChanMapOp();
      }
      public Builder setChanMapOp(org.photovault.image.ImageOpDto.ChanMapOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasChanMapOp = true;
        result.chanMapOp_ = value;
        return this;
      }
      public Builder setChanMapOp(org.photovault.image.ImageOpDto.ChanMapOp.Builder builderForValue) {
        result.hasChanMapOp = true;
        result.chanMapOp_ = builderForValue.build();
        return this;
      }
      public Builder mergeChanMapOp(org.photovault.image.ImageOpDto.ChanMapOp value) {
        if (result.hasChanMapOp() &&
            result.chanMapOp_ != org.photovault.image.ImageOpDto.ChanMapOp.getDefaultInstance()) {
          result.chanMapOp_ =
            org.photovault.image.ImageOpDto.ChanMapOp.newBuilder(result.chanMapOp_).mergeFrom(value).buildPartial();
        } else {
          result.chanMapOp_ = value;
        }
        result.hasChanMapOp = true;
        return this;
      }
      public Builder clearChanMapOp() {
        result.hasChanMapOp = false;
        result.chanMapOp_ = org.photovault.image.ImageOpDto.ChanMapOp.getDefaultInstance();
        return this;
      }
      
      // optional .CropOp cropOp = 5;
      public boolean hasCropOp() {
        return result.hasCropOp();
      }
      public org.photovault.image.ImageOpDto.CropOp getCropOp() {
        return result.getCropOp();
      }
      public Builder setCropOp(org.photovault.image.ImageOpDto.CropOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCropOp = true;
        result.cropOp_ = value;
        return this;
      }
      public Builder setCropOp(org.photovault.image.ImageOpDto.CropOp.Builder builderForValue) {
        result.hasCropOp = true;
        result.cropOp_ = builderForValue.build();
        return this;
      }
      public Builder mergeCropOp(org.photovault.image.ImageOpDto.CropOp value) {
        if (result.hasCropOp() &&
            result.cropOp_ != org.photovault.image.ImageOpDto.CropOp.getDefaultInstance()) {
          result.cropOp_ =
            org.photovault.image.ImageOpDto.CropOp.newBuilder(result.cropOp_).mergeFrom(value).buildPartial();
        } else {
          result.cropOp_ = value;
        }
        result.hasCropOp = true;
        return this;
      }
      public Builder clearCropOp() {
        result.hasCropOp = false;
        result.cropOp_ = org.photovault.image.ImageOpDto.CropOp.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:ImageOp)
    }
    
    static {
      defaultInstance = new ImageOp(true);
      org.photovault.image.ImageOpDto.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:ImageOp)
  }
  
  public static final class DCRawOp extends
      com.google.protobuf.GeneratedMessage {
    // Use DCRawOp.newBuilder() to construct.
    private DCRawOp() {
      initFields();
    }
    private DCRawOp(boolean noInit) {}
    
    private static final DCRawOp defaultInstance;
    public static DCRawOp getDefaultInstance() {
      return defaultInstance;
    }
    
    public DCRawOp getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.image.ImageOpDto.internal_static_DCRawOp_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.image.ImageOpDto.internal_static_DCRawOp_fieldAccessorTable;
    }
    
    // required double red_green_ratio = 3;
    public static final int RED_GREEN_RATIO_FIELD_NUMBER = 3;
    private boolean hasRedGreenRatio;
    private double redGreenRatio_ = 0D;
    public boolean hasRedGreenRatio() { return hasRedGreenRatio; }
    public double getRedGreenRatio() { return redGreenRatio_; }
    
    // required double blue_green_ratio = 4;
    public static final int BLUE_GREEN_RATIO_FIELD_NUMBER = 4;
    private boolean hasBlueGreenRatio;
    private double blueGreenRatio_ = 0D;
    public boolean hasBlueGreenRatio() { return hasBlueGreenRatio; }
    public double getBlueGreenRatio() { return blueGreenRatio_; }
    
    // required double dl_blue_green_ratio = 5;
    public static final int DL_BLUE_GREEN_RATIO_FIELD_NUMBER = 5;
    private boolean hasDlBlueGreenRatio;
    private double dlBlueGreenRatio_ = 0D;
    public boolean hasDlBlueGreenRatio() { return hasDlBlueGreenRatio; }
    public double getDlBlueGreenRatio() { return dlBlueGreenRatio_; }
    
    // required double dl_red_green_ratio = 6;
    public static final int DL_RED_GREEN_RATIO_FIELD_NUMBER = 6;
    private boolean hasDlRedGreenRatio;
    private double dlRedGreenRatio_ = 0D;
    public boolean hasDlRedGreenRatio() { return hasDlRedGreenRatio; }
    public double getDlRedGreenRatio() { return dlRedGreenRatio_; }
    
    // required uint32 median_filter_pass_count = 7;
    public static final int MEDIAN_FILTER_PASS_COUNT_FIELD_NUMBER = 7;
    private boolean hasMedianFilterPassCount;
    private int medianFilterPassCount_ = 0;
    public boolean hasMedianFilterPassCount() { return hasMedianFilterPassCount; }
    public int getMedianFilterPassCount() { return medianFilterPassCount_; }
    
    // required double wavelet_denoise_threshold = 8;
    public static final int WAVELET_DENOISE_THRESHOLD_FIELD_NUMBER = 8;
    private boolean hasWaveletDenoiseThreshold;
    private double waveletDenoiseThreshold_ = 0D;
    public boolean hasWaveletDenoiseThreshold() { return hasWaveletDenoiseThreshold; }
    public double getWaveletDenoiseThreshold() { return waveletDenoiseThreshold_; }
    
    // repeated double aber_corr = 9;
    public static final int ABER_CORR_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Double> aberCorr_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Double> getAberCorrList() {
      return aberCorr_;
    }
    public int getAberCorrCount() { return aberCorr_.size(); }
    public double getAberCorr(int index) {
      return aberCorr_.get(index);
    }
    
    // optional uint32 hlight_recovery = 10;
    public static final int HLIGHT_RECOVERY_FIELD_NUMBER = 10;
    private boolean hasHlightRecovery;
    private int hlightRecovery_ = 0;
    public boolean hasHlightRecovery() { return hasHlightRecovery; }
    public int getHlightRecovery() { return hlightRecovery_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasRedGreenRatio) return false;
      if (!hasBlueGreenRatio) return false;
      if (!hasDlBlueGreenRatio) return false;
      if (!hasDlRedGreenRatio) return false;
      if (!hasMedianFilterPassCount) return false;
      if (!hasWaveletDenoiseThreshold) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasRedGreenRatio()) {
        output.writeDouble(3, getRedGreenRatio());
      }
      if (hasBlueGreenRatio()) {
        output.writeDouble(4, getBlueGreenRatio());
      }
      if (hasDlBlueGreenRatio()) {
        output.writeDouble(5, getDlBlueGreenRatio());
      }
      if (hasDlRedGreenRatio()) {
        output.writeDouble(6, getDlRedGreenRatio());
      }
      if (hasMedianFilterPassCount()) {
        output.writeUInt32(7, getMedianFilterPassCount());
      }
      if (hasWaveletDenoiseThreshold()) {
        output.writeDouble(8, getWaveletDenoiseThreshold());
      }
      for (double element : getAberCorrList()) {
        output.writeDouble(9, element);
      }
      if (hasHlightRecovery()) {
        output.writeUInt32(10, getHlightRecovery());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasRedGreenRatio()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, getRedGreenRatio());
      }
      if (hasBlueGreenRatio()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, getBlueGreenRatio());
      }
      if (hasDlBlueGreenRatio()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, getDlBlueGreenRatio());
      }
      if (hasDlRedGreenRatio()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, getDlRedGreenRatio());
      }
      if (hasMedianFilterPassCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, getMedianFilterPassCount());
      }
      if (hasWaveletDenoiseThreshold()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, getWaveletDenoiseThreshold());
      }
      {
        int dataSize = 0;
        dataSize = 8 * getAberCorrList().size();
        size += dataSize;
        size += 1 * getAberCorrList().size();
      }
      if (hasHlightRecovery()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, getHlightRecovery());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.image.ImageOpDto.DCRawOp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawOp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawOp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawOp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawOp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawOp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawOp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.DCRawOp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.DCRawOp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawOp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.image.ImageOpDto.DCRawOp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.image.ImageOpDto.DCRawOp result;
      
      // Construct using org.photovault.image.ImageOpDto.DCRawOp.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.image.ImageOpDto.DCRawOp();
        return builder;
      }
      
      protected org.photovault.image.ImageOpDto.DCRawOp internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.image.ImageOpDto.DCRawOp();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.image.ImageOpDto.DCRawOp.getDescriptor();
      }
      
      public org.photovault.image.ImageOpDto.DCRawOp getDefaultInstanceForType() {
        return org.photovault.image.ImageOpDto.DCRawOp.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.image.ImageOpDto.DCRawOp build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.image.ImageOpDto.DCRawOp buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.image.ImageOpDto.DCRawOp buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.aberCorr_ != java.util.Collections.EMPTY_LIST) {
          result.aberCorr_ =
            java.util.Collections.unmodifiableList(result.aberCorr_);
        }
        org.photovault.image.ImageOpDto.DCRawOp returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.image.ImageOpDto.DCRawOp) {
          return mergeFrom((org.photovault.image.ImageOpDto.DCRawOp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.image.ImageOpDto.DCRawOp other) {
        if (other == org.photovault.image.ImageOpDto.DCRawOp.getDefaultInstance()) return this;
        if (other.hasRedGreenRatio()) {
          setRedGreenRatio(other.getRedGreenRatio());
        }
        if (other.hasBlueGreenRatio()) {
          setBlueGreenRatio(other.getBlueGreenRatio());
        }
        if (other.hasDlBlueGreenRatio()) {
          setDlBlueGreenRatio(other.getDlBlueGreenRatio());
        }
        if (other.hasDlRedGreenRatio()) {
          setDlRedGreenRatio(other.getDlRedGreenRatio());
        }
        if (other.hasMedianFilterPassCount()) {
          setMedianFilterPassCount(other.getMedianFilterPassCount());
        }
        if (other.hasWaveletDenoiseThreshold()) {
          setWaveletDenoiseThreshold(other.getWaveletDenoiseThreshold());
        }
        if (!other.aberCorr_.isEmpty()) {
          if (result.aberCorr_.isEmpty()) {
            result.aberCorr_ = new java.util.ArrayList<java.lang.Double>();
          }
          result.aberCorr_.addAll(other.aberCorr_);
        }
        if (other.hasHlightRecovery()) {
          setHlightRecovery(other.getHlightRecovery());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 25: {
              setRedGreenRatio(input.readDouble());
              break;
            }
            case 33: {
              setBlueGreenRatio(input.readDouble());
              break;
            }
            case 41: {
              setDlBlueGreenRatio(input.readDouble());
              break;
            }
            case 49: {
              setDlRedGreenRatio(input.readDouble());
              break;
            }
            case 56: {
              setMedianFilterPassCount(input.readUInt32());
              break;
            }
            case 65: {
              setWaveletDenoiseThreshold(input.readDouble());
              break;
            }
            case 73: {
              addAberCorr(input.readDouble());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addAberCorr(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              setHlightRecovery(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // required double red_green_ratio = 3;
      public boolean hasRedGreenRatio() {
        return result.hasRedGreenRatio();
      }
      public double getRedGreenRatio() {
        return result.getRedGreenRatio();
      }
      public Builder setRedGreenRatio(double value) {
        result.hasRedGreenRatio = true;
        result.redGreenRatio_ = value;
        return this;
      }
      public Builder clearRedGreenRatio() {
        result.hasRedGreenRatio = false;
        result.redGreenRatio_ = 0D;
        return this;
      }
      
      // required double blue_green_ratio = 4;
      public boolean hasBlueGreenRatio() {
        return result.hasBlueGreenRatio();
      }
      public double getBlueGreenRatio() {
        return result.getBlueGreenRatio();
      }
      public Builder setBlueGreenRatio(double value) {
        result.hasBlueGreenRatio = true;
        result.blueGreenRatio_ = value;
        return this;
      }
      public Builder clearBlueGreenRatio() {
        result.hasBlueGreenRatio = false;
        result.blueGreenRatio_ = 0D;
        return this;
      }
      
      // required double dl_blue_green_ratio = 5;
      public boolean hasDlBlueGreenRatio() {
        return result.hasDlBlueGreenRatio();
      }
      public double getDlBlueGreenRatio() {
        return result.getDlBlueGreenRatio();
      }
      public Builder setDlBlueGreenRatio(double value) {
        result.hasDlBlueGreenRatio = true;
        result.dlBlueGreenRatio_ = value;
        return this;
      }
      public Builder clearDlBlueGreenRatio() {
        result.hasDlBlueGreenRatio = false;
        result.dlBlueGreenRatio_ = 0D;
        return this;
      }
      
      // required double dl_red_green_ratio = 6;
      public boolean hasDlRedGreenRatio() {
        return result.hasDlRedGreenRatio();
      }
      public double getDlRedGreenRatio() {
        return result.getDlRedGreenRatio();
      }
      public Builder setDlRedGreenRatio(double value) {
        result.hasDlRedGreenRatio = true;
        result.dlRedGreenRatio_ = value;
        return this;
      }
      public Builder clearDlRedGreenRatio() {
        result.hasDlRedGreenRatio = false;
        result.dlRedGreenRatio_ = 0D;
        return this;
      }
      
      // required uint32 median_filter_pass_count = 7;
      public boolean hasMedianFilterPassCount() {
        return result.hasMedianFilterPassCount();
      }
      public int getMedianFilterPassCount() {
        return result.getMedianFilterPassCount();
      }
      public Builder setMedianFilterPassCount(int value) {
        result.hasMedianFilterPassCount = true;
        result.medianFilterPassCount_ = value;
        return this;
      }
      public Builder clearMedianFilterPassCount() {
        result.hasMedianFilterPassCount = false;
        result.medianFilterPassCount_ = 0;
        return this;
      }
      
      // required double wavelet_denoise_threshold = 8;
      public boolean hasWaveletDenoiseThreshold() {
        return result.hasWaveletDenoiseThreshold();
      }
      public double getWaveletDenoiseThreshold() {
        return result.getWaveletDenoiseThreshold();
      }
      public Builder setWaveletDenoiseThreshold(double value) {
        result.hasWaveletDenoiseThreshold = true;
        result.waveletDenoiseThreshold_ = value;
        return this;
      }
      public Builder clearWaveletDenoiseThreshold() {
        result.hasWaveletDenoiseThreshold = false;
        result.waveletDenoiseThreshold_ = 0D;
        return this;
      }
      
      // repeated double aber_corr = 9;
      public java.util.List<java.lang.Double> getAberCorrList() {
        return java.util.Collections.unmodifiableList(result.aberCorr_);
      }
      public int getAberCorrCount() {
        return result.getAberCorrCount();
      }
      public double getAberCorr(int index) {
        return result.getAberCorr(index);
      }
      public Builder setAberCorr(int index, double value) {
        result.aberCorr_.set(index, value);
        return this;
      }
      public Builder addAberCorr(double value) {
        if (result.aberCorr_.isEmpty()) {
          result.aberCorr_ = new java.util.ArrayList<java.lang.Double>();
        }
        result.aberCorr_.add(value);
        return this;
      }
      public Builder addAllAberCorr(
          java.lang.Iterable<? extends java.lang.Double> values) {
        if (result.aberCorr_.isEmpty()) {
          result.aberCorr_ = new java.util.ArrayList<java.lang.Double>();
        }
        super.addAll(values, result.aberCorr_);
        return this;
      }
      public Builder clearAberCorr() {
        result.aberCorr_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional uint32 hlight_recovery = 10;
      public boolean hasHlightRecovery() {
        return result.hasHlightRecovery();
      }
      public int getHlightRecovery() {
        return result.getHlightRecovery();
      }
      public Builder setHlightRecovery(int value) {
        result.hasHlightRecovery = true;
        result.hlightRecovery_ = value;
        return this;
      }
      public Builder clearHlightRecovery() {
        result.hasHlightRecovery = false;
        result.hlightRecovery_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:DCRawOp)
    }
    
    static {
      defaultInstance = new DCRawOp(true);
      org.photovault.image.ImageOpDto.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:DCRawOp)
  }
  
  public static final class DCRawMapOp extends
      com.google.protobuf.GeneratedMessage {
    // Use DCRawMapOp.newBuilder() to construct.
    private DCRawMapOp() {
      initFields();
    }
    private DCRawMapOp(boolean noInit) {}
    
    private static final DCRawMapOp defaultInstance;
    public static DCRawMapOp getDefaultInstance() {
      return defaultInstance;
    }
    
    public DCRawMapOp getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.image.ImageOpDto.internal_static_DCRawMapOp_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.image.ImageOpDto.internal_static_DCRawMapOp_fieldAccessorTable;
    }
    
    // required uint32 white = 1;
    public static final int WHITE_FIELD_NUMBER = 1;
    private boolean hasWhite;
    private int white_ = 0;
    public boolean hasWhite() { return hasWhite; }
    public int getWhite() { return white_; }
    
    // required uint32 black = 2;
    public static final int BLACK_FIELD_NUMBER = 2;
    private boolean hasBlack;
    private int black_ = 0;
    public boolean hasBlack() { return hasBlack; }
    public int getBlack() { return black_; }
    
    // optional double hlightCompr = 3 [default = 0];
    public static final int HLIGHTCOMPR_FIELD_NUMBER = 3;
    private boolean hasHlightCompr;
    private double hlightCompr_ = 0D;
    public boolean hasHlightCompr() { return hasHlightCompr; }
    public double getHlightCompr() { return hlightCompr_; }
    
    // optional double evCorr = 4 [default = 0];
    public static final int EVCORR_FIELD_NUMBER = 4;
    private boolean hasEvCorr;
    private double evCorr_ = 0D;
    public boolean hasEvCorr() { return hasEvCorr; }
    public double getEvCorr() { return evCorr_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasWhite) return false;
      if (!hasBlack) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasWhite()) {
        output.writeUInt32(1, getWhite());
      }
      if (hasBlack()) {
        output.writeUInt32(2, getBlack());
      }
      if (hasHlightCompr()) {
        output.writeDouble(3, getHlightCompr());
      }
      if (hasEvCorr()) {
        output.writeDouble(4, getEvCorr());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasWhite()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getWhite());
      }
      if (hasBlack()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, getBlack());
      }
      if (hasHlightCompr()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, getHlightCompr());
      }
      if (hasEvCorr()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, getEvCorr());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.image.ImageOpDto.DCRawMapOp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawMapOp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawMapOp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawMapOp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawMapOp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawMapOp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawMapOp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.DCRawMapOp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.DCRawMapOp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.DCRawMapOp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.image.ImageOpDto.DCRawMapOp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.image.ImageOpDto.DCRawMapOp result;
      
      // Construct using org.photovault.image.ImageOpDto.DCRawMapOp.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.image.ImageOpDto.DCRawMapOp();
        return builder;
      }
      
      protected org.photovault.image.ImageOpDto.DCRawMapOp internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.image.ImageOpDto.DCRawMapOp();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.image.ImageOpDto.DCRawMapOp.getDescriptor();
      }
      
      public org.photovault.image.ImageOpDto.DCRawMapOp getDefaultInstanceForType() {
        return org.photovault.image.ImageOpDto.DCRawMapOp.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.image.ImageOpDto.DCRawMapOp build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.image.ImageOpDto.DCRawMapOp buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.image.ImageOpDto.DCRawMapOp buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.image.ImageOpDto.DCRawMapOp returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.image.ImageOpDto.DCRawMapOp) {
          return mergeFrom((org.photovault.image.ImageOpDto.DCRawMapOp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.image.ImageOpDto.DCRawMapOp other) {
        if (other == org.photovault.image.ImageOpDto.DCRawMapOp.getDefaultInstance()) return this;
        if (other.hasWhite()) {
          setWhite(other.getWhite());
        }
        if (other.hasBlack()) {
          setBlack(other.getBlack());
        }
        if (other.hasHlightCompr()) {
          setHlightCompr(other.getHlightCompr());
        }
        if (other.hasEvCorr()) {
          setEvCorr(other.getEvCorr());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setWhite(input.readUInt32());
              break;
            }
            case 16: {
              setBlack(input.readUInt32());
              break;
            }
            case 25: {
              setHlightCompr(input.readDouble());
              break;
            }
            case 33: {
              setEvCorr(input.readDouble());
              break;
            }
          }
        }
      }
      
      
      // required uint32 white = 1;
      public boolean hasWhite() {
        return result.hasWhite();
      }
      public int getWhite() {
        return result.getWhite();
      }
      public Builder setWhite(int value) {
        result.hasWhite = true;
        result.white_ = value;
        return this;
      }
      public Builder clearWhite() {
        result.hasWhite = false;
        result.white_ = 0;
        return this;
      }
      
      // required uint32 black = 2;
      public boolean hasBlack() {
        return result.hasBlack();
      }
      public int getBlack() {
        return result.getBlack();
      }
      public Builder setBlack(int value) {
        result.hasBlack = true;
        result.black_ = value;
        return this;
      }
      public Builder clearBlack() {
        result.hasBlack = false;
        result.black_ = 0;
        return this;
      }
      
      // optional double hlightCompr = 3 [default = 0];
      public boolean hasHlightCompr() {
        return result.hasHlightCompr();
      }
      public double getHlightCompr() {
        return result.getHlightCompr();
      }
      public Builder setHlightCompr(double value) {
        result.hasHlightCompr = true;
        result.hlightCompr_ = value;
        return this;
      }
      public Builder clearHlightCompr() {
        result.hasHlightCompr = false;
        result.hlightCompr_ = 0D;
        return this;
      }
      
      // optional double evCorr = 4 [default = 0];
      public boolean hasEvCorr() {
        return result.hasEvCorr();
      }
      public double getEvCorr() {
        return result.getEvCorr();
      }
      public Builder setEvCorr(double value) {
        result.hasEvCorr = true;
        result.evCorr_ = value;
        return this;
      }
      public Builder clearEvCorr() {
        result.hasEvCorr = false;
        result.evCorr_ = 0D;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:DCRawMapOp)
    }
    
    static {
      defaultInstance = new DCRawMapOp(true);
      org.photovault.image.ImageOpDto.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:DCRawMapOp)
  }
  
  public static final class ChanMapOp extends
      com.google.protobuf.GeneratedMessage {
    // Use ChanMapOp.newBuilder() to construct.
    private ChanMapOp() {
      initFields();
    }
    private ChanMapOp(boolean noInit) {}
    
    private static final ChanMapOp defaultInstance;
    public static ChanMapOp getDefaultInstance() {
      return defaultInstance;
    }
    
    public ChanMapOp getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.image.ImageOpDto.internal_static_ChanMapOp_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.image.ImageOpDto.internal_static_ChanMapOp_fieldAccessorTable;
    }
    
    // repeated .ColorCurve channel_curves = 1;
    public static final int CHANNEL_CURVES_FIELD_NUMBER = 1;
    private java.util.List<org.photovault.image.ImageOpDto.ColorCurve> channelCurves_ =
      java.util.Collections.emptyList();
    public java.util.List<org.photovault.image.ImageOpDto.ColorCurve> getChannelCurvesList() {
      return channelCurves_;
    }
    public int getChannelCurvesCount() { return channelCurves_.size(); }
    public org.photovault.image.ImageOpDto.ColorCurve getChannelCurves(int index) {
      return channelCurves_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (org.photovault.image.ImageOpDto.ColorCurve element : getChannelCurvesList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (org.photovault.image.ImageOpDto.ColorCurve element : getChannelCurvesList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (org.photovault.image.ImageOpDto.ColorCurve element : getChannelCurvesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.image.ImageOpDto.ChanMapOp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ChanMapOp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ChanMapOp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ChanMapOp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ChanMapOp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ChanMapOp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ChanMapOp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.ChanMapOp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.ChanMapOp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ChanMapOp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.image.ImageOpDto.ChanMapOp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.image.ImageOpDto.ChanMapOp result;
      
      // Construct using org.photovault.image.ImageOpDto.ChanMapOp.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.image.ImageOpDto.ChanMapOp();
        return builder;
      }
      
      protected org.photovault.image.ImageOpDto.ChanMapOp internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.image.ImageOpDto.ChanMapOp();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.image.ImageOpDto.ChanMapOp.getDescriptor();
      }
      
      public org.photovault.image.ImageOpDto.ChanMapOp getDefaultInstanceForType() {
        return org.photovault.image.ImageOpDto.ChanMapOp.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.image.ImageOpDto.ChanMapOp build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.image.ImageOpDto.ChanMapOp buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.image.ImageOpDto.ChanMapOp buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.channelCurves_ != java.util.Collections.EMPTY_LIST) {
          result.channelCurves_ =
            java.util.Collections.unmodifiableList(result.channelCurves_);
        }
        org.photovault.image.ImageOpDto.ChanMapOp returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.image.ImageOpDto.ChanMapOp) {
          return mergeFrom((org.photovault.image.ImageOpDto.ChanMapOp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.image.ImageOpDto.ChanMapOp other) {
        if (other == org.photovault.image.ImageOpDto.ChanMapOp.getDefaultInstance()) return this;
        if (!other.channelCurves_.isEmpty()) {
          if (result.channelCurves_.isEmpty()) {
            result.channelCurves_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.ColorCurve>();
          }
          result.channelCurves_.addAll(other.channelCurves_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              org.photovault.image.ImageOpDto.ColorCurve.Builder subBuilder = org.photovault.image.ImageOpDto.ColorCurve.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addChannelCurves(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .ColorCurve channel_curves = 1;
      public java.util.List<org.photovault.image.ImageOpDto.ColorCurve> getChannelCurvesList() {
        return java.util.Collections.unmodifiableList(result.channelCurves_);
      }
      public int getChannelCurvesCount() {
        return result.getChannelCurvesCount();
      }
      public org.photovault.image.ImageOpDto.ColorCurve getChannelCurves(int index) {
        return result.getChannelCurves(index);
      }
      public Builder setChannelCurves(int index, org.photovault.image.ImageOpDto.ColorCurve value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.channelCurves_.set(index, value);
        return this;
      }
      public Builder setChannelCurves(int index, org.photovault.image.ImageOpDto.ColorCurve.Builder builderForValue) {
        result.channelCurves_.set(index, builderForValue.build());
        return this;
      }
      public Builder addChannelCurves(org.photovault.image.ImageOpDto.ColorCurve value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.channelCurves_.isEmpty()) {
          result.channelCurves_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.ColorCurve>();
        }
        result.channelCurves_.add(value);
        return this;
      }
      public Builder addChannelCurves(org.photovault.image.ImageOpDto.ColorCurve.Builder builderForValue) {
        if (result.channelCurves_.isEmpty()) {
          result.channelCurves_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.ColorCurve>();
        }
        result.channelCurves_.add(builderForValue.build());
        return this;
      }
      public Builder addAllChannelCurves(
          java.lang.Iterable<? extends org.photovault.image.ImageOpDto.ColorCurve> values) {
        if (result.channelCurves_.isEmpty()) {
          result.channelCurves_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.ColorCurve>();
        }
        super.addAll(values, result.channelCurves_);
        return this;
      }
      public Builder clearChannelCurves() {
        result.channelCurves_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:ChanMapOp)
    }
    
    static {
      defaultInstance = new ChanMapOp(true);
      org.photovault.image.ImageOpDto.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:ChanMapOp)
  }
  
  public static final class Point2Ddouble extends
      com.google.protobuf.GeneratedMessage {
    // Use Point2Ddouble.newBuilder() to construct.
    private Point2Ddouble() {
      initFields();
    }
    private Point2Ddouble(boolean noInit) {}
    
    private static final Point2Ddouble defaultInstance;
    public static Point2Ddouble getDefaultInstance() {
      return defaultInstance;
    }
    
    public Point2Ddouble getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.image.ImageOpDto.internal_static_Point2Ddouble_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.image.ImageOpDto.internal_static_Point2Ddouble_fieldAccessorTable;
    }
    
    // required double x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private boolean hasX;
    private double x_ = 0D;
    public boolean hasX() { return hasX; }
    public double getX() { return x_; }
    
    // required double y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private boolean hasY;
    private double y_ = 0D;
    public boolean hasY() { return hasY; }
    public double getY() { return y_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasX) return false;
      if (!hasY) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasX()) {
        output.writeDouble(1, getX());
      }
      if (hasY()) {
        output.writeDouble(2, getY());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasX()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, getX());
      }
      if (hasY()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, getY());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.image.ImageOpDto.Point2Ddouble parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Point2Ddouble parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Point2Ddouble parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Point2Ddouble parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Point2Ddouble parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Point2Ddouble parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Point2Ddouble parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.Point2Ddouble parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.Point2Ddouble parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.Point2Ddouble parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.image.ImageOpDto.Point2Ddouble prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.image.ImageOpDto.Point2Ddouble result;
      
      // Construct using org.photovault.image.ImageOpDto.Point2Ddouble.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.image.ImageOpDto.Point2Ddouble();
        return builder;
      }
      
      protected org.photovault.image.ImageOpDto.Point2Ddouble internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.image.ImageOpDto.Point2Ddouble();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.image.ImageOpDto.Point2Ddouble.getDescriptor();
      }
      
      public org.photovault.image.ImageOpDto.Point2Ddouble getDefaultInstanceForType() {
        return org.photovault.image.ImageOpDto.Point2Ddouble.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.image.ImageOpDto.Point2Ddouble build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.image.ImageOpDto.Point2Ddouble buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.image.ImageOpDto.Point2Ddouble buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.image.ImageOpDto.Point2Ddouble returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.image.ImageOpDto.Point2Ddouble) {
          return mergeFrom((org.photovault.image.ImageOpDto.Point2Ddouble)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.image.ImageOpDto.Point2Ddouble other) {
        if (other == org.photovault.image.ImageOpDto.Point2Ddouble.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 9: {
              setX(input.readDouble());
              break;
            }
            case 17: {
              setY(input.readDouble());
              break;
            }
          }
        }
      }
      
      
      // required double x = 1;
      public boolean hasX() {
        return result.hasX();
      }
      public double getX() {
        return result.getX();
      }
      public Builder setX(double value) {
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder clearX() {
        result.hasX = false;
        result.x_ = 0D;
        return this;
      }
      
      // required double y = 2;
      public boolean hasY() {
        return result.hasY();
      }
      public double getY() {
        return result.getY();
      }
      public Builder setY(double value) {
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder clearY() {
        result.hasY = false;
        result.y_ = 0D;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Point2Ddouble)
    }
    
    static {
      defaultInstance = new Point2Ddouble(true);
      org.photovault.image.ImageOpDto.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Point2Ddouble)
  }
  
  public static final class ColorCurve extends
      com.google.protobuf.GeneratedMessage {
    // Use ColorCurve.newBuilder() to construct.
    private ColorCurve() {
      initFields();
    }
    private ColorCurve(boolean noInit) {}
    
    private static final ColorCurve defaultInstance;
    public static ColorCurve getDefaultInstance() {
      return defaultInstance;
    }
    
    public ColorCurve getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.image.ImageOpDto.internal_static_ColorCurve_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.image.ImageOpDto.internal_static_ColorCurve_fieldAccessorTable;
    }
    
    // required string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // repeated .Point2Ddouble points = 2;
    public static final int POINTS_FIELD_NUMBER = 2;
    private java.util.List<org.photovault.image.ImageOpDto.Point2Ddouble> points_ =
      java.util.Collections.emptyList();
    public java.util.List<org.photovault.image.ImageOpDto.Point2Ddouble> getPointsList() {
      return points_;
    }
    public int getPointsCount() { return points_.size(); }
    public org.photovault.image.ImageOpDto.Point2Ddouble getPoints(int index) {
      return points_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasName) return false;
      for (org.photovault.image.ImageOpDto.Point2Ddouble element : getPointsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      for (org.photovault.image.ImageOpDto.Point2Ddouble element : getPointsList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      for (org.photovault.image.ImageOpDto.Point2Ddouble element : getPointsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.image.ImageOpDto.ColorCurve parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ColorCurve parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ColorCurve parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ColorCurve parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ColorCurve parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ColorCurve parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ColorCurve parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.ColorCurve parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.ColorCurve parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.ColorCurve parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.image.ImageOpDto.ColorCurve prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.image.ImageOpDto.ColorCurve result;
      
      // Construct using org.photovault.image.ImageOpDto.ColorCurve.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.image.ImageOpDto.ColorCurve();
        return builder;
      }
      
      protected org.photovault.image.ImageOpDto.ColorCurve internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.image.ImageOpDto.ColorCurve();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.image.ImageOpDto.ColorCurve.getDescriptor();
      }
      
      public org.photovault.image.ImageOpDto.ColorCurve getDefaultInstanceForType() {
        return org.photovault.image.ImageOpDto.ColorCurve.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.image.ImageOpDto.ColorCurve build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.image.ImageOpDto.ColorCurve buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.image.ImageOpDto.ColorCurve buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.points_ != java.util.Collections.EMPTY_LIST) {
          result.points_ =
            java.util.Collections.unmodifiableList(result.points_);
        }
        org.photovault.image.ImageOpDto.ColorCurve returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.image.ImageOpDto.ColorCurve) {
          return mergeFrom((org.photovault.image.ImageOpDto.ColorCurve)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.image.ImageOpDto.ColorCurve other) {
        if (other == org.photovault.image.ImageOpDto.ColorCurve.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (!other.points_.isEmpty()) {
          if (result.points_.isEmpty()) {
            result.points_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.Point2Ddouble>();
          }
          result.points_.addAll(other.points_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 18: {
              org.photovault.image.ImageOpDto.Point2Ddouble.Builder subBuilder = org.photovault.image.ImageOpDto.Point2Ddouble.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addPoints(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required string name = 1;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // repeated .Point2Ddouble points = 2;
      public java.util.List<org.photovault.image.ImageOpDto.Point2Ddouble> getPointsList() {
        return java.util.Collections.unmodifiableList(result.points_);
      }
      public int getPointsCount() {
        return result.getPointsCount();
      }
      public org.photovault.image.ImageOpDto.Point2Ddouble getPoints(int index) {
        return result.getPoints(index);
      }
      public Builder setPoints(int index, org.photovault.image.ImageOpDto.Point2Ddouble value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.points_.set(index, value);
        return this;
      }
      public Builder setPoints(int index, org.photovault.image.ImageOpDto.Point2Ddouble.Builder builderForValue) {
        result.points_.set(index, builderForValue.build());
        return this;
      }
      public Builder addPoints(org.photovault.image.ImageOpDto.Point2Ddouble value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.points_.isEmpty()) {
          result.points_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.Point2Ddouble>();
        }
        result.points_.add(value);
        return this;
      }
      public Builder addPoints(org.photovault.image.ImageOpDto.Point2Ddouble.Builder builderForValue) {
        if (result.points_.isEmpty()) {
          result.points_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.Point2Ddouble>();
        }
        result.points_.add(builderForValue.build());
        return this;
      }
      public Builder addAllPoints(
          java.lang.Iterable<? extends org.photovault.image.ImageOpDto.Point2Ddouble> values) {
        if (result.points_.isEmpty()) {
          result.points_ = new java.util.ArrayList<org.photovault.image.ImageOpDto.Point2Ddouble>();
        }
        super.addAll(values, result.points_);
        return this;
      }
      public Builder clearPoints() {
        result.points_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:ColorCurve)
    }
    
    static {
      defaultInstance = new ColorCurve(true);
      org.photovault.image.ImageOpDto.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:ColorCurve)
  }
  
  public static final class CropOp extends
      com.google.protobuf.GeneratedMessage {
    // Use CropOp.newBuilder() to construct.
    private CropOp() {
      initFields();
    }
    private CropOp(boolean noInit) {}
    
    private static final CropOp defaultInstance;
    public static CropOp getDefaultInstance() {
      return defaultInstance;
    }
    
    public CropOp getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.image.ImageOpDto.internal_static_CropOp_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.image.ImageOpDto.internal_static_CropOp_fieldAccessorTable;
    }
    
    // required double minx = 1;
    public static final int MINX_FIELD_NUMBER = 1;
    private boolean hasMinx;
    private double minx_ = 0D;
    public boolean hasMinx() { return hasMinx; }
    public double getMinx() { return minx_; }
    
    // required double miny = 2;
    public static final int MINY_FIELD_NUMBER = 2;
    private boolean hasMiny;
    private double miny_ = 0D;
    public boolean hasMiny() { return hasMiny; }
    public double getMiny() { return miny_; }
    
    // required double maxx = 3;
    public static final int MAXX_FIELD_NUMBER = 3;
    private boolean hasMaxx;
    private double maxx_ = 0D;
    public boolean hasMaxx() { return hasMaxx; }
    public double getMaxx() { return maxx_; }
    
    // required double maxy = 4;
    public static final int MAXY_FIELD_NUMBER = 4;
    private boolean hasMaxy;
    private double maxy_ = 0D;
    public boolean hasMaxy() { return hasMaxy; }
    public double getMaxy() { return maxy_; }
    
    // optional double rot = 5 [default = 0];
    public static final int ROT_FIELD_NUMBER = 5;
    private boolean hasRot;
    private double rot_ = 0D;
    public boolean hasRot() { return hasRot; }
    public double getRot() { return rot_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasMinx) return false;
      if (!hasMiny) return false;
      if (!hasMaxx) return false;
      if (!hasMaxy) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasMinx()) {
        output.writeDouble(1, getMinx());
      }
      if (hasMiny()) {
        output.writeDouble(2, getMiny());
      }
      if (hasMaxx()) {
        output.writeDouble(3, getMaxx());
      }
      if (hasMaxy()) {
        output.writeDouble(4, getMaxy());
      }
      if (hasRot()) {
        output.writeDouble(5, getRot());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasMinx()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, getMinx());
      }
      if (hasMiny()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, getMiny());
      }
      if (hasMaxx()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, getMaxx());
      }
      if (hasMaxy()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, getMaxy());
      }
      if (hasRot()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, getRot());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.image.ImageOpDto.CropOp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.CropOp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.CropOp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.CropOp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.CropOp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.CropOp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.image.ImageOpDto.CropOp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.CropOp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.image.ImageOpDto.CropOp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.image.ImageOpDto.CropOp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.image.ImageOpDto.CropOp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.image.ImageOpDto.CropOp result;
      
      // Construct using org.photovault.image.ImageOpDto.CropOp.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.image.ImageOpDto.CropOp();
        return builder;
      }
      
      protected org.photovault.image.ImageOpDto.CropOp internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.image.ImageOpDto.CropOp();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.image.ImageOpDto.CropOp.getDescriptor();
      }
      
      public org.photovault.image.ImageOpDto.CropOp getDefaultInstanceForType() {
        return org.photovault.image.ImageOpDto.CropOp.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.image.ImageOpDto.CropOp build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.image.ImageOpDto.CropOp buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.image.ImageOpDto.CropOp buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.image.ImageOpDto.CropOp returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.image.ImageOpDto.CropOp) {
          return mergeFrom((org.photovault.image.ImageOpDto.CropOp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.image.ImageOpDto.CropOp other) {
        if (other == org.photovault.image.ImageOpDto.CropOp.getDefaultInstance()) return this;
        if (other.hasMinx()) {
          setMinx(other.getMinx());
        }
        if (other.hasMiny()) {
          setMiny(other.getMiny());
        }
        if (other.hasMaxx()) {
          setMaxx(other.getMaxx());
        }
        if (other.hasMaxy()) {
          setMaxy(other.getMaxy());
        }
        if (other.hasRot()) {
          setRot(other.getRot());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 9: {
              setMinx(input.readDouble());
              break;
            }
            case 17: {
              setMiny(input.readDouble());
              break;
            }
            case 25: {
              setMaxx(input.readDouble());
              break;
            }
            case 33: {
              setMaxy(input.readDouble());
              break;
            }
            case 41: {
              setRot(input.readDouble());
              break;
            }
          }
        }
      }
      
      
      // required double minx = 1;
      public boolean hasMinx() {
        return result.hasMinx();
      }
      public double getMinx() {
        return result.getMinx();
      }
      public Builder setMinx(double value) {
        result.hasMinx = true;
        result.minx_ = value;
        return this;
      }
      public Builder clearMinx() {
        result.hasMinx = false;
        result.minx_ = 0D;
        return this;
      }
      
      // required double miny = 2;
      public boolean hasMiny() {
        return result.hasMiny();
      }
      public double getMiny() {
        return result.getMiny();
      }
      public Builder setMiny(double value) {
        result.hasMiny = true;
        result.miny_ = value;
        return this;
      }
      public Builder clearMiny() {
        result.hasMiny = false;
        result.miny_ = 0D;
        return this;
      }
      
      // required double maxx = 3;
      public boolean hasMaxx() {
        return result.hasMaxx();
      }
      public double getMaxx() {
        return result.getMaxx();
      }
      public Builder setMaxx(double value) {
        result.hasMaxx = true;
        result.maxx_ = value;
        return this;
      }
      public Builder clearMaxx() {
        result.hasMaxx = false;
        result.maxx_ = 0D;
        return this;
      }
      
      // required double maxy = 4;
      public boolean hasMaxy() {
        return result.hasMaxy();
      }
      public double getMaxy() {
        return result.getMaxy();
      }
      public Builder setMaxy(double value) {
        result.hasMaxy = true;
        result.maxy_ = value;
        return this;
      }
      public Builder clearMaxy() {
        result.hasMaxy = false;
        result.maxy_ = 0D;
        return this;
      }
      
      // optional double rot = 5 [default = 0];
      public boolean hasRot() {
        return result.hasRot();
      }
      public double getRot() {
        return result.getRot();
      }
      public Builder setRot(double value) {
        result.hasRot = true;
        result.rot_ = value;
        return this;
      }
      public Builder clearRot() {
        result.hasRot = false;
        result.rot_ = 0D;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:CropOp)
    }
    
    static {
      defaultInstance = new CropOp(true);
      org.photovault.image.ImageOpDto.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:CropOp)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ImageOpChain_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ImageOpChain_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Link_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Link_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ImageOp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ImageOp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_DCRawOp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_DCRawOp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_DCRawMapOp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_DCRawMapOp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ChanMapOp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ChanMapOp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Point2Ddouble_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Point2Ddouble_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ColorCurve_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ColorCurve_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CropOp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CropOp_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022image_op_dto.proto\"P\n\014ImageOpChain\022\014\n\004" +
      "head\030\001 \002(\t\022\034\n\noperations\030\002 \003(\0132\010.ImageOp" +
      "\022\024\n\005links\030\003 \003(\0132\005.Link\"$\n\004Link\022\016\n\006source" +
      "\030\001 \002(\t\022\014\n\004sink\030\002 \002(\t\"\207\001\n\007ImageOp\022\014\n\004name" +
      "\030\001 \002(\t\022\027\n\005rawOp\030\002 \001(\0132\010.DCRawOp\022\035\n\010rawMa" +
      "pOp\030\003 \001(\0132\013.DCRawMapOp\022\035\n\tchanMapOp\030\004 \001(" +
      "\0132\n.ChanMapOp\022\027\n\006cropOp\030\005 \001(\0132\007.CropOp\"\346" +
      "\001\n\007DCRawOp\022\027\n\017red_green_ratio\030\003 \002(\001\022\030\n\020b" +
      "lue_green_ratio\030\004 \002(\001\022\033\n\023dl_blue_green_r" +
      "atio\030\005 \002(\001\022\032\n\022dl_red_green_ratio\030\006 \002(\001\022 ",
      "\n\030median_filter_pass_count\030\007 \002(\r\022!\n\031wave" +
      "let_denoise_threshold\030\010 \002(\001\022\021\n\taber_corr" +
      "\030\t \003(\001\022\027\n\017hlight_recovery\030\n \001(\r\"U\n\nDCRaw" +
      "MapOp\022\r\n\005white\030\001 \002(\r\022\r\n\005black\030\002 \002(\r\022\026\n\013h" +
      "lightCompr\030\003 \001(\001:\0010\022\021\n\006evCorr\030\004 \001(\001:\0010\"0" +
      "\n\tChanMapOp\022#\n\016channel_curves\030\001 \003(\0132\013.Co" +
      "lorCurve\"%\n\rPoint2Ddouble\022\t\n\001x\030\001 \002(\001\022\t\n\001" +
      "y\030\002 \002(\001\":\n\nColorCurve\022\014\n\004name\030\001 \002(\t\022\036\n\006p" +
      "oints\030\002 \003(\0132\016.Point2Ddouble\"P\n\006CropOp\022\014\n" +
      "\004minx\030\001 \002(\001\022\014\n\004miny\030\002 \002(\001\022\014\n\004maxx\030\003 \002(\001\022",
      "\014\n\004maxy\030\004 \002(\001\022\016\n\003rot\030\005 \001(\001:\0010B\031\n\024org.pho" +
      "tovault.image\210\001\000"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_ImageOpChain_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_ImageOpChain_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ImageOpChain_descriptor,
              new java.lang.String[] { "Head", "Operations", "Links", },
              org.photovault.image.ImageOpDto.ImageOpChain.class,
              org.photovault.image.ImageOpDto.ImageOpChain.Builder.class);
          internal_static_Link_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_Link_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Link_descriptor,
              new java.lang.String[] { "Source", "Sink", },
              org.photovault.image.ImageOpDto.Link.class,
              org.photovault.image.ImageOpDto.Link.Builder.class);
          internal_static_ImageOp_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_ImageOp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ImageOp_descriptor,
              new java.lang.String[] { "Name", "RawOp", "RawMapOp", "ChanMapOp", "CropOp", },
              org.photovault.image.ImageOpDto.ImageOp.class,
              org.photovault.image.ImageOpDto.ImageOp.Builder.class);
          internal_static_DCRawOp_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_DCRawOp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_DCRawOp_descriptor,
              new java.lang.String[] { "RedGreenRatio", "BlueGreenRatio", "DlBlueGreenRatio", "DlRedGreenRatio", "MedianFilterPassCount", "WaveletDenoiseThreshold", "AberCorr", "HlightRecovery", },
              org.photovault.image.ImageOpDto.DCRawOp.class,
              org.photovault.image.ImageOpDto.DCRawOp.Builder.class);
          internal_static_DCRawMapOp_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_DCRawMapOp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_DCRawMapOp_descriptor,
              new java.lang.String[] { "White", "Black", "HlightCompr", "EvCorr", },
              org.photovault.image.ImageOpDto.DCRawMapOp.class,
              org.photovault.image.ImageOpDto.DCRawMapOp.Builder.class);
          internal_static_ChanMapOp_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_ChanMapOp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ChanMapOp_descriptor,
              new java.lang.String[] { "ChannelCurves", },
              org.photovault.image.ImageOpDto.ChanMapOp.class,
              org.photovault.image.ImageOpDto.ChanMapOp.Builder.class);
          internal_static_Point2Ddouble_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_Point2Ddouble_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Point2Ddouble_descriptor,
              new java.lang.String[] { "X", "Y", },
              org.photovault.image.ImageOpDto.Point2Ddouble.class,
              org.photovault.image.ImageOpDto.Point2Ddouble.Builder.class);
          internal_static_ColorCurve_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_ColorCurve_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ColorCurve_descriptor,
              new java.lang.String[] { "Name", "Points", },
              org.photovault.image.ImageOpDto.ColorCurve.class,
              org.photovault.image.ImageOpDto.ColorCurve.Builder.class);
          internal_static_CropOp_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_CropOp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CropOp_descriptor,
              new java.lang.String[] { "Minx", "Miny", "Maxx", "Maxy", "Rot", },
              org.photovault.image.ImageOpDto.CropOp.class,
              org.photovault.image.ImageOpDto.CropOp.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
