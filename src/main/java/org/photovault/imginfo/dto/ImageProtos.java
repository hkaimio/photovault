// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_protos.proto

package org.photovault.imginfo.dto;

public final class ImageProtos {
  private ImageProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registry.add(org.photovault.imginfo.dto.ImageProtos.image);
    registry.add(org.photovault.imginfo.dto.ImageProtos.imafeFile);
    registry.add(org.photovault.imginfo.dto.ImageProtos.imageRef);
    registry.add(org.photovault.imginfo.dto.ImageProtos.volume);
    registry.add(org.photovault.imginfo.dto.ImageProtos.fileLocation);
    registry.add(org.photovault.imginfo.dto.ImageProtos.imageOpChain);
    registry.add(org.photovault.imginfo.dto.ImageProtos.dcrawOp);
    registry.add(org.photovault.imginfo.dto.ImageProtos.rawMapOp);
    registry.add(org.photovault.imginfo.dto.ImageProtos.chanMapOp);
    registry.add(org.photovault.imginfo.dto.ImageProtos.cropOp);
    registry.add(org.photovault.imginfo.dto.ImageProtos.colorCurve);
    registry.add(org.photovault.imginfo.dto.ImageProtos.timeRange);
    registry.add(org.photovault.imginfo.dto.ImageProtos.folderRef);
  }
  public enum ImageType
      implements com.google.protobuf.ProtocolMessageEnum {
    ORIGINAL(0, 1),
    COPY(1, 2),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static ImageType valueOf(int value) {
      switch (value) {
        case 1: return ORIGINAL;
        case 2: return COPY;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<ImageType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ImageType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ImageType>() {
            public ImageType findValueByNumber(int number) {
              return ImageType.valueOf(number)
    ;        }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.photovault.imginfo.dto.ImageProtos.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final ImageType[] VALUES = {
      ORIGINAL, COPY, 
    };
    public static ImageType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    private final int index;
    private final int value;
    private ImageType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    static {
      org.photovault.imginfo.dto.ImageProtos.getDescriptor();
    }
    
    // @@protoc_insertion_point(enum_scope:ImageType)
  }
  
  public enum VolumeType
      implements com.google.protobuf.ProtocolMessageEnum {
    EXTERNAL(0, 1),
    TRAD(1, 2),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static VolumeType valueOf(int value) {
      switch (value) {
        case 1: return EXTERNAL;
        case 2: return TRAD;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<VolumeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<VolumeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<VolumeType>() {
            public VolumeType findValueByNumber(int number) {
              return VolumeType.valueOf(number)
    ;        }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.photovault.imginfo.dto.ImageProtos.getDescriptor().getEnumTypes().get(1);
    }
    
    private static final VolumeType[] VALUES = {
      EXTERNAL, TRAD, 
    };
    public static VolumeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    private final int index;
    private final int value;
    private VolumeType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    static {
      org.photovault.imginfo.dto.ImageProtos.getDescriptor();
    }
    
    // @@protoc_insertion_point(enum_scope:VolumeType)
  }
  
  public static final class Image extends
      com.google.protobuf.GeneratedMessage {
    // Use Image.newBuilder() to construct.
    private Image() {
      initFields();
    }
    private Image(boolean noInit) {}
    
    private static final Image defaultInstance;
    public static Image getDefaultInstance() {
      return defaultInstance;
    }
    
    public Image getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_Image_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_Image_fieldAccessorTable;
    }
    
    // required .ImageType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private org.photovault.imginfo.dto.ImageProtos.ImageType type_;
    public boolean hasType() { return hasType; }
    public org.photovault.imginfo.dto.ImageProtos.ImageType getType() { return type_; }
    
    // required string locator = 2;
    public static final int LOCATOR_FIELD_NUMBER = 2;
    private boolean hasLocator;
    private java.lang.String locator_ = "";
    public boolean hasLocator() { return hasLocator; }
    public java.lang.String getLocator() { return locator_; }
    
    // required uint32 width = 3;
    public static final int WIDTH_FIELD_NUMBER = 3;
    private boolean hasWidth;
    private int width_ = 0;
    public boolean hasWidth() { return hasWidth; }
    public int getWidth() { return width_; }
    
    // required uint32 height = 4;
    public static final int HEIGHT_FIELD_NUMBER = 4;
    private boolean hasHeight;
    private int height_ = 0;
    public boolean hasHeight() { return hasHeight; }
    public int getHeight() { return height_; }
    
    // optional .ImageRef original = 5;
    public static final int ORIGINAL_FIELD_NUMBER = 5;
    private boolean hasOriginal;
    private org.photovault.imginfo.dto.ImageProtos.ImageRef original_;
    public boolean hasOriginal() { return hasOriginal; }
    public org.photovault.imginfo.dto.ImageProtos.ImageRef getOriginal() { return original_; }
    
    // optional .ImageOpChain processing = 6;
    public static final int PROCESSING_FIELD_NUMBER = 6;
    private boolean hasProcessing;
    private org.photovault.image.ImageOpDto.ImageOpChain processing_;
    public boolean hasProcessing() { return hasProcessing; }
    public org.photovault.image.ImageOpDto.ImageOpChain getProcessing() { return processing_; }
    
    private void initFields() {
      type_ = org.photovault.imginfo.dto.ImageProtos.ImageType.ORIGINAL;
      original_ = org.photovault.imginfo.dto.ImageProtos.ImageRef.getDefaultInstance();
      processing_ = org.photovault.image.ImageOpDto.ImageOpChain.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasType) return false;
      if (!hasLocator) return false;
      if (!hasWidth) return false;
      if (!hasHeight) return false;
      if (hasOriginal()) {
        if (!getOriginal().isInitialized()) return false;
      }
      if (hasProcessing()) {
        if (!getProcessing().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasLocator()) {
        output.writeString(2, getLocator());
      }
      if (hasWidth()) {
        output.writeUInt32(3, getWidth());
      }
      if (hasHeight()) {
        output.writeUInt32(4, getHeight());
      }
      if (hasOriginal()) {
        output.writeMessage(5, getOriginal());
      }
      if (hasProcessing()) {
        output.writeMessage(6, getProcessing());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasLocator()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getLocator());
      }
      if (hasWidth()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, getWidth());
      }
      if (hasHeight()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, getHeight());
      }
      if (hasOriginal()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getOriginal());
      }
      if (hasProcessing()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getProcessing());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.imginfo.dto.ImageProtos.Image parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Image parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Image parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Image parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Image parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Image parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Image parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.Image parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.Image parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Image parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.imginfo.dto.ImageProtos.Image prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.imginfo.dto.ImageProtos.Image result;
      
      // Construct using org.photovault.imginfo.dto.ImageProtos.Image.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.imginfo.dto.ImageProtos.Image();
        return builder;
      }
      
      protected org.photovault.imginfo.dto.ImageProtos.Image internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.imginfo.dto.ImageProtos.Image();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.imginfo.dto.ImageProtos.Image.getDescriptor();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.Image getDefaultInstanceForType() {
        return org.photovault.imginfo.dto.ImageProtos.Image.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.imginfo.dto.ImageProtos.Image build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.imginfo.dto.ImageProtos.Image buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.Image buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.imginfo.dto.ImageProtos.Image returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.imginfo.dto.ImageProtos.Image) {
          return mergeFrom((org.photovault.imginfo.dto.ImageProtos.Image)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.imginfo.dto.ImageProtos.Image other) {
        if (other == org.photovault.imginfo.dto.ImageProtos.Image.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasLocator()) {
          setLocator(other.getLocator());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasOriginal()) {
          mergeOriginal(other.getOriginal());
        }
        if (other.hasProcessing()) {
          mergeProcessing(other.getProcessing());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.photovault.imginfo.dto.ImageProtos.ImageType value = org.photovault.imginfo.dto.ImageProtos.ImageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                setType(value);
              }
              break;
            }
            case 18: {
              setLocator(input.readString());
              break;
            }
            case 24: {
              setWidth(input.readUInt32());
              break;
            }
            case 32: {
              setHeight(input.readUInt32());
              break;
            }
            case 42: {
              org.photovault.imginfo.dto.ImageProtos.ImageRef.Builder subBuilder = org.photovault.imginfo.dto.ImageProtos.ImageRef.newBuilder();
              if (hasOriginal()) {
                subBuilder.mergeFrom(getOriginal());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setOriginal(subBuilder.buildPartial());
              break;
            }
            case 50: {
              org.photovault.image.ImageOpDto.ImageOpChain.Builder subBuilder = org.photovault.image.ImageOpDto.ImageOpChain.newBuilder();
              if (hasProcessing()) {
                subBuilder.mergeFrom(getProcessing());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setProcessing(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .ImageType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public org.photovault.imginfo.dto.ImageProtos.ImageType getType() {
        return result.getType();
      }
      public Builder setType(org.photovault.imginfo.dto.ImageProtos.ImageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = org.photovault.imginfo.dto.ImageProtos.ImageType.ORIGINAL;
        return this;
      }
      
      // required string locator = 2;
      public boolean hasLocator() {
        return result.hasLocator();
      }
      public java.lang.String getLocator() {
        return result.getLocator();
      }
      public Builder setLocator(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasLocator = true;
        result.locator_ = value;
        return this;
      }
      public Builder clearLocator() {
        result.hasLocator = false;
        result.locator_ = getDefaultInstance().getLocator();
        return this;
      }
      
      // required uint32 width = 3;
      public boolean hasWidth() {
        return result.hasWidth();
      }
      public int getWidth() {
        return result.getWidth();
      }
      public Builder setWidth(int value) {
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder clearWidth() {
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      // required uint32 height = 4;
      public boolean hasHeight() {
        return result.hasHeight();
      }
      public int getHeight() {
        return result.getHeight();
      }
      public Builder setHeight(int value) {
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder clearHeight() {
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
      
      // optional .ImageRef original = 5;
      public boolean hasOriginal() {
        return result.hasOriginal();
      }
      public org.photovault.imginfo.dto.ImageProtos.ImageRef getOriginal() {
        return result.getOriginal();
      }
      public Builder setOriginal(org.photovault.imginfo.dto.ImageProtos.ImageRef value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasOriginal = true;
        result.original_ = value;
        return this;
      }
      public Builder setOriginal(org.photovault.imginfo.dto.ImageProtos.ImageRef.Builder builderForValue) {
        result.hasOriginal = true;
        result.original_ = builderForValue.build();
        return this;
      }
      public Builder mergeOriginal(org.photovault.imginfo.dto.ImageProtos.ImageRef value) {
        if (result.hasOriginal() &&
            result.original_ != org.photovault.imginfo.dto.ImageProtos.ImageRef.getDefaultInstance()) {
          result.original_ =
            org.photovault.imginfo.dto.ImageProtos.ImageRef.newBuilder(result.original_).mergeFrom(value).buildPartial();
        } else {
          result.original_ = value;
        }
        result.hasOriginal = true;
        return this;
      }
      public Builder clearOriginal() {
        result.hasOriginal = false;
        result.original_ = org.photovault.imginfo.dto.ImageProtos.ImageRef.getDefaultInstance();
        return this;
      }
      
      // optional .ImageOpChain processing = 6;
      public boolean hasProcessing() {
        return result.hasProcessing();
      }
      public org.photovault.image.ImageOpDto.ImageOpChain getProcessing() {
        return result.getProcessing();
      }
      public Builder setProcessing(org.photovault.image.ImageOpDto.ImageOpChain value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasProcessing = true;
        result.processing_ = value;
        return this;
      }
      public Builder setProcessing(org.photovault.image.ImageOpDto.ImageOpChain.Builder builderForValue) {
        result.hasProcessing = true;
        result.processing_ = builderForValue.build();
        return this;
      }
      public Builder mergeProcessing(org.photovault.image.ImageOpDto.ImageOpChain value) {
        if (result.hasProcessing() &&
            result.processing_ != org.photovault.image.ImageOpDto.ImageOpChain.getDefaultInstance()) {
          result.processing_ =
            org.photovault.image.ImageOpDto.ImageOpChain.newBuilder(result.processing_).mergeFrom(value).buildPartial();
        } else {
          result.processing_ = value;
        }
        result.hasProcessing = true;
        return this;
      }
      public Builder clearProcessing() {
        result.hasProcessing = false;
        result.processing_ = org.photovault.image.ImageOpDto.ImageOpChain.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Image)
    }
    
    static {
      defaultInstance = new Image(true);
      org.photovault.imginfo.dto.ImageProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Image)
  }
  
  public static final class ImageFile extends
      com.google.protobuf.GeneratedMessage {
    // Use ImageFile.newBuilder() to construct.
    private ImageFile() {
      initFields();
    }
    private ImageFile(boolean noInit) {}
    
    private static final ImageFile defaultInstance;
    public static ImageFile getDefaultInstance() {
      return defaultInstance;
    }
    
    public ImageFile getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_ImageFile_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_ImageFile_fieldAccessorTable;
    }
    
    // required bytes md5_hash = 1;
    public static final int MD5_HASH_FIELD_NUMBER = 1;
    private boolean hasMd5Hash;
    private com.google.protobuf.ByteString md5Hash_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasMd5Hash() { return hasMd5Hash; }
    public com.google.protobuf.ByteString getMd5Hash() { return md5Hash_; }
    
    // required .UUID uuid = 2;
    public static final int UUID_FIELD_NUMBER = 2;
    private boolean hasUuid;
    private org.photovault.common.Types.UUID uuid_;
    public boolean hasUuid() { return hasUuid; }
    public org.photovault.common.Types.UUID getUuid() { return uuid_; }
    
    // required uint64 size = 3;
    public static final int SIZE_FIELD_NUMBER = 3;
    private boolean hasSize;
    private long size_ = 0L;
    public boolean hasSize() { return hasSize; }
    public long getSize() { return size_; }
    
    // repeated .Image images = 4;
    public static final int IMAGES_FIELD_NUMBER = 4;
    private java.util.List<org.photovault.imginfo.dto.ImageProtos.Image> images_ =
      java.util.Collections.emptyList();
    public java.util.List<org.photovault.imginfo.dto.ImageProtos.Image> getImagesList() {
      return images_;
    }
    public int getImagesCount() { return images_.size(); }
    public org.photovault.imginfo.dto.ImageProtos.Image getImages(int index) {
      return images_.get(index);
    }
    
    // repeated .FileLocation locations = 5;
    public static final int LOCATIONS_FIELD_NUMBER = 5;
    private java.util.List<org.photovault.imginfo.dto.ImageProtos.FileLocation> locations_ =
      java.util.Collections.emptyList();
    public java.util.List<org.photovault.imginfo.dto.ImageProtos.FileLocation> getLocationsList() {
      return locations_;
    }
    public int getLocationsCount() { return locations_.size(); }
    public org.photovault.imginfo.dto.ImageProtos.FileLocation getLocations(int index) {
      return locations_.get(index);
    }
    
    private void initFields() {
      uuid_ = org.photovault.common.Types.UUID.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasMd5Hash) return false;
      if (!hasUuid) return false;
      if (!hasSize) return false;
      if (!getUuid().isInitialized()) return false;
      for (org.photovault.imginfo.dto.ImageProtos.Image element : getImagesList()) {
        if (!element.isInitialized()) return false;
      }
      for (org.photovault.imginfo.dto.ImageProtos.FileLocation element : getLocationsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasMd5Hash()) {
        output.writeBytes(1, getMd5Hash());
      }
      if (hasUuid()) {
        output.writeMessage(2, getUuid());
      }
      if (hasSize()) {
        output.writeUInt64(3, getSize());
      }
      for (org.photovault.imginfo.dto.ImageProtos.Image element : getImagesList()) {
        output.writeMessage(4, element);
      }
      for (org.photovault.imginfo.dto.ImageProtos.FileLocation element : getLocationsList()) {
        output.writeMessage(5, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasMd5Hash()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getMd5Hash());
      }
      if (hasUuid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getUuid());
      }
      if (hasSize()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, getSize());
      }
      for (org.photovault.imginfo.dto.ImageProtos.Image element : getImagesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, element);
      }
      for (org.photovault.imginfo.dto.ImageProtos.FileLocation element : getLocationsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.imginfo.dto.ImageProtos.ImageFile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageFile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageFile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageFile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageFile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageFile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageFile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageFile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageFile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageFile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.imginfo.dto.ImageProtos.ImageFile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.imginfo.dto.ImageProtos.ImageFile result;
      
      // Construct using org.photovault.imginfo.dto.ImageProtos.ImageFile.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.imginfo.dto.ImageProtos.ImageFile();
        return builder;
      }
      
      protected org.photovault.imginfo.dto.ImageProtos.ImageFile internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.imginfo.dto.ImageProtos.ImageFile();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.imginfo.dto.ImageProtos.ImageFile.getDescriptor();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.ImageFile getDefaultInstanceForType() {
        return org.photovault.imginfo.dto.ImageProtos.ImageFile.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.imginfo.dto.ImageProtos.ImageFile build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.imginfo.dto.ImageProtos.ImageFile buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.ImageFile buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.images_ != java.util.Collections.EMPTY_LIST) {
          result.images_ =
            java.util.Collections.unmodifiableList(result.images_);
        }
        if (result.locations_ != java.util.Collections.EMPTY_LIST) {
          result.locations_ =
            java.util.Collections.unmodifiableList(result.locations_);
        }
        org.photovault.imginfo.dto.ImageProtos.ImageFile returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.imginfo.dto.ImageProtos.ImageFile) {
          return mergeFrom((org.photovault.imginfo.dto.ImageProtos.ImageFile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.imginfo.dto.ImageProtos.ImageFile other) {
        if (other == org.photovault.imginfo.dto.ImageProtos.ImageFile.getDefaultInstance()) return this;
        if (other.hasMd5Hash()) {
          setMd5Hash(other.getMd5Hash());
        }
        if (other.hasUuid()) {
          mergeUuid(other.getUuid());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        if (!other.images_.isEmpty()) {
          if (result.images_.isEmpty()) {
            result.images_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.Image>();
          }
          result.images_.addAll(other.images_);
        }
        if (!other.locations_.isEmpty()) {
          if (result.locations_.isEmpty()) {
            result.locations_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.FileLocation>();
          }
          result.locations_.addAll(other.locations_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setMd5Hash(input.readBytes());
              break;
            }
            case 18: {
              org.photovault.common.Types.UUID.Builder subBuilder = org.photovault.common.Types.UUID.newBuilder();
              if (hasUuid()) {
                subBuilder.mergeFrom(getUuid());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setUuid(subBuilder.buildPartial());
              break;
            }
            case 24: {
              setSize(input.readUInt64());
              break;
            }
            case 34: {
              org.photovault.imginfo.dto.ImageProtos.Image.Builder subBuilder = org.photovault.imginfo.dto.ImageProtos.Image.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addImages(subBuilder.buildPartial());
              break;
            }
            case 42: {
              org.photovault.imginfo.dto.ImageProtos.FileLocation.Builder subBuilder = org.photovault.imginfo.dto.ImageProtos.FileLocation.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addLocations(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required bytes md5_hash = 1;
      public boolean hasMd5Hash() {
        return result.hasMd5Hash();
      }
      public com.google.protobuf.ByteString getMd5Hash() {
        return result.getMd5Hash();
      }
      public Builder setMd5Hash(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasMd5Hash = true;
        result.md5Hash_ = value;
        return this;
      }
      public Builder clearMd5Hash() {
        result.hasMd5Hash = false;
        result.md5Hash_ = getDefaultInstance().getMd5Hash();
        return this;
      }
      
      // required .UUID uuid = 2;
      public boolean hasUuid() {
        return result.hasUuid();
      }
      public org.photovault.common.Types.UUID getUuid() {
        return result.getUuid();
      }
      public Builder setUuid(org.photovault.common.Types.UUID value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasUuid = true;
        result.uuid_ = value;
        return this;
      }
      public Builder setUuid(org.photovault.common.Types.UUID.Builder builderForValue) {
        result.hasUuid = true;
        result.uuid_ = builderForValue.build();
        return this;
      }
      public Builder mergeUuid(org.photovault.common.Types.UUID value) {
        if (result.hasUuid() &&
            result.uuid_ != org.photovault.common.Types.UUID.getDefaultInstance()) {
          result.uuid_ =
            org.photovault.common.Types.UUID.newBuilder(result.uuid_).mergeFrom(value).buildPartial();
        } else {
          result.uuid_ = value;
        }
        result.hasUuid = true;
        return this;
      }
      public Builder clearUuid() {
        result.hasUuid = false;
        result.uuid_ = org.photovault.common.Types.UUID.getDefaultInstance();
        return this;
      }
      
      // required uint64 size = 3;
      public boolean hasSize() {
        return result.hasSize();
      }
      public long getSize() {
        return result.getSize();
      }
      public Builder setSize(long value) {
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder clearSize() {
        result.hasSize = false;
        result.size_ = 0L;
        return this;
      }
      
      // repeated .Image images = 4;
      public java.util.List<org.photovault.imginfo.dto.ImageProtos.Image> getImagesList() {
        return java.util.Collections.unmodifiableList(result.images_);
      }
      public int getImagesCount() {
        return result.getImagesCount();
      }
      public org.photovault.imginfo.dto.ImageProtos.Image getImages(int index) {
        return result.getImages(index);
      }
      public Builder setImages(int index, org.photovault.imginfo.dto.ImageProtos.Image value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.images_.set(index, value);
        return this;
      }
      public Builder setImages(int index, org.photovault.imginfo.dto.ImageProtos.Image.Builder builderForValue) {
        result.images_.set(index, builderForValue.build());
        return this;
      }
      public Builder addImages(org.photovault.imginfo.dto.ImageProtos.Image value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.images_.isEmpty()) {
          result.images_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.Image>();
        }
        result.images_.add(value);
        return this;
      }
      public Builder addImages(org.photovault.imginfo.dto.ImageProtos.Image.Builder builderForValue) {
        if (result.images_.isEmpty()) {
          result.images_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.Image>();
        }
        result.images_.add(builderForValue.build());
        return this;
      }
      public Builder addAllImages(
          java.lang.Iterable<? extends org.photovault.imginfo.dto.ImageProtos.Image> values) {
        if (result.images_.isEmpty()) {
          result.images_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.Image>();
        }
        super.addAll(values, result.images_);
        return this;
      }
      public Builder clearImages() {
        result.images_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .FileLocation locations = 5;
      public java.util.List<org.photovault.imginfo.dto.ImageProtos.FileLocation> getLocationsList() {
        return java.util.Collections.unmodifiableList(result.locations_);
      }
      public int getLocationsCount() {
        return result.getLocationsCount();
      }
      public org.photovault.imginfo.dto.ImageProtos.FileLocation getLocations(int index) {
        return result.getLocations(index);
      }
      public Builder setLocations(int index, org.photovault.imginfo.dto.ImageProtos.FileLocation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.locations_.set(index, value);
        return this;
      }
      public Builder setLocations(int index, org.photovault.imginfo.dto.ImageProtos.FileLocation.Builder builderForValue) {
        result.locations_.set(index, builderForValue.build());
        return this;
      }
      public Builder addLocations(org.photovault.imginfo.dto.ImageProtos.FileLocation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.locations_.isEmpty()) {
          result.locations_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.FileLocation>();
        }
        result.locations_.add(value);
        return this;
      }
      public Builder addLocations(org.photovault.imginfo.dto.ImageProtos.FileLocation.Builder builderForValue) {
        if (result.locations_.isEmpty()) {
          result.locations_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.FileLocation>();
        }
        result.locations_.add(builderForValue.build());
        return this;
      }
      public Builder addAllLocations(
          java.lang.Iterable<? extends org.photovault.imginfo.dto.ImageProtos.FileLocation> values) {
        if (result.locations_.isEmpty()) {
          result.locations_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.FileLocation>();
        }
        super.addAll(values, result.locations_);
        return this;
      }
      public Builder clearLocations() {
        result.locations_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:ImageFile)
    }
    
    static {
      defaultInstance = new ImageFile(true);
      org.photovault.imginfo.dto.ImageProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:ImageFile)
  }
  
  public static final class ImageRef extends
      com.google.protobuf.GeneratedMessage {
    // Use ImageRef.newBuilder() to construct.
    private ImageRef() {
      initFields();
    }
    private ImageRef(boolean noInit) {}
    
    private static final ImageRef defaultInstance;
    public static ImageRef getDefaultInstance() {
      return defaultInstance;
    }
    
    public ImageRef getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_ImageRef_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_ImageRef_fieldAccessorTable;
    }
    
    // required .UUID file_uuid = 1;
    public static final int FILE_UUID_FIELD_NUMBER = 1;
    private boolean hasFileUuid;
    private org.photovault.common.Types.UUID fileUuid_;
    public boolean hasFileUuid() { return hasFileUuid; }
    public org.photovault.common.Types.UUID getFileUuid() { return fileUuid_; }
    
    // required string locator = 2;
    public static final int LOCATOR_FIELD_NUMBER = 2;
    private boolean hasLocator;
    private java.lang.String locator_ = "";
    public boolean hasLocator() { return hasLocator; }
    public java.lang.String getLocator() { return locator_; }
    
    // optional .ImageFile original_file = 3;
    public static final int ORIGINAL_FILE_FIELD_NUMBER = 3;
    private boolean hasOriginalFile;
    private org.photovault.imginfo.dto.ImageProtos.ImageFile originalFile_;
    public boolean hasOriginalFile() { return hasOriginalFile; }
    public org.photovault.imginfo.dto.ImageProtos.ImageFile getOriginalFile() { return originalFile_; }
    
    private void initFields() {
      fileUuid_ = org.photovault.common.Types.UUID.getDefaultInstance();
      originalFile_ = org.photovault.imginfo.dto.ImageProtos.ImageFile.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasFileUuid) return false;
      if (!hasLocator) return false;
      if (!getFileUuid().isInitialized()) return false;
      if (hasOriginalFile()) {
        if (!getOriginalFile().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasFileUuid()) {
        output.writeMessage(1, getFileUuid());
      }
      if (hasLocator()) {
        output.writeString(2, getLocator());
      }
      if (hasOriginalFile()) {
        output.writeMessage(3, getOriginalFile());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasFileUuid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getFileUuid());
      }
      if (hasLocator()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getLocator());
      }
      if (hasOriginalFile()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getOriginalFile());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.imginfo.dto.ImageProtos.ImageRef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageRef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageRef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageRef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageRef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageRef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageRef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageRef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageRef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.ImageRef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.imginfo.dto.ImageProtos.ImageRef prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.imginfo.dto.ImageProtos.ImageRef result;
      
      // Construct using org.photovault.imginfo.dto.ImageProtos.ImageRef.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.imginfo.dto.ImageProtos.ImageRef();
        return builder;
      }
      
      protected org.photovault.imginfo.dto.ImageProtos.ImageRef internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.imginfo.dto.ImageProtos.ImageRef();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.imginfo.dto.ImageProtos.ImageRef.getDescriptor();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.ImageRef getDefaultInstanceForType() {
        return org.photovault.imginfo.dto.ImageProtos.ImageRef.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.imginfo.dto.ImageProtos.ImageRef build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.imginfo.dto.ImageProtos.ImageRef buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.ImageRef buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.imginfo.dto.ImageProtos.ImageRef returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.imginfo.dto.ImageProtos.ImageRef) {
          return mergeFrom((org.photovault.imginfo.dto.ImageProtos.ImageRef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.imginfo.dto.ImageProtos.ImageRef other) {
        if (other == org.photovault.imginfo.dto.ImageProtos.ImageRef.getDefaultInstance()) return this;
        if (other.hasFileUuid()) {
          mergeFileUuid(other.getFileUuid());
        }
        if (other.hasLocator()) {
          setLocator(other.getLocator());
        }
        if (other.hasOriginalFile()) {
          mergeOriginalFile(other.getOriginalFile());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              org.photovault.common.Types.UUID.Builder subBuilder = org.photovault.common.Types.UUID.newBuilder();
              if (hasFileUuid()) {
                subBuilder.mergeFrom(getFileUuid());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFileUuid(subBuilder.buildPartial());
              break;
            }
            case 18: {
              setLocator(input.readString());
              break;
            }
            case 26: {
              org.photovault.imginfo.dto.ImageProtos.ImageFile.Builder subBuilder = org.photovault.imginfo.dto.ImageProtos.ImageFile.newBuilder();
              if (hasOriginalFile()) {
                subBuilder.mergeFrom(getOriginalFile());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setOriginalFile(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .UUID file_uuid = 1;
      public boolean hasFileUuid() {
        return result.hasFileUuid();
      }
      public org.photovault.common.Types.UUID getFileUuid() {
        return result.getFileUuid();
      }
      public Builder setFileUuid(org.photovault.common.Types.UUID value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFileUuid = true;
        result.fileUuid_ = value;
        return this;
      }
      public Builder setFileUuid(org.photovault.common.Types.UUID.Builder builderForValue) {
        result.hasFileUuid = true;
        result.fileUuid_ = builderForValue.build();
        return this;
      }
      public Builder mergeFileUuid(org.photovault.common.Types.UUID value) {
        if (result.hasFileUuid() &&
            result.fileUuid_ != org.photovault.common.Types.UUID.getDefaultInstance()) {
          result.fileUuid_ =
            org.photovault.common.Types.UUID.newBuilder(result.fileUuid_).mergeFrom(value).buildPartial();
        } else {
          result.fileUuid_ = value;
        }
        result.hasFileUuid = true;
        return this;
      }
      public Builder clearFileUuid() {
        result.hasFileUuid = false;
        result.fileUuid_ = org.photovault.common.Types.UUID.getDefaultInstance();
        return this;
      }
      
      // required string locator = 2;
      public boolean hasLocator() {
        return result.hasLocator();
      }
      public java.lang.String getLocator() {
        return result.getLocator();
      }
      public Builder setLocator(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasLocator = true;
        result.locator_ = value;
        return this;
      }
      public Builder clearLocator() {
        result.hasLocator = false;
        result.locator_ = getDefaultInstance().getLocator();
        return this;
      }
      
      // optional .ImageFile original_file = 3;
      public boolean hasOriginalFile() {
        return result.hasOriginalFile();
      }
      public org.photovault.imginfo.dto.ImageProtos.ImageFile getOriginalFile() {
        return result.getOriginalFile();
      }
      public Builder setOriginalFile(org.photovault.imginfo.dto.ImageProtos.ImageFile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasOriginalFile = true;
        result.originalFile_ = value;
        return this;
      }
      public Builder setOriginalFile(org.photovault.imginfo.dto.ImageProtos.ImageFile.Builder builderForValue) {
        result.hasOriginalFile = true;
        result.originalFile_ = builderForValue.build();
        return this;
      }
      public Builder mergeOriginalFile(org.photovault.imginfo.dto.ImageProtos.ImageFile value) {
        if (result.hasOriginalFile() &&
            result.originalFile_ != org.photovault.imginfo.dto.ImageProtos.ImageFile.getDefaultInstance()) {
          result.originalFile_ =
            org.photovault.imginfo.dto.ImageProtos.ImageFile.newBuilder(result.originalFile_).mergeFrom(value).buildPartial();
        } else {
          result.originalFile_ = value;
        }
        result.hasOriginalFile = true;
        return this;
      }
      public Builder clearOriginalFile() {
        result.hasOriginalFile = false;
        result.originalFile_ = org.photovault.imginfo.dto.ImageProtos.ImageFile.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:ImageRef)
    }
    
    static {
      defaultInstance = new ImageRef(true);
      org.photovault.imginfo.dto.ImageProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:ImageRef)
  }
  
  public static final class FolderRef extends
      com.google.protobuf.GeneratedMessage {
    // Use FolderRef.newBuilder() to construct.
    private FolderRef() {
      initFields();
    }
    private FolderRef(boolean noInit) {}
    
    private static final FolderRef defaultInstance;
    public static FolderRef getDefaultInstance() {
      return defaultInstance;
    }
    
    public FolderRef getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_FolderRef_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_FolderRef_fieldAccessorTable;
    }
    
    // optional .UUID ref_id = 1;
    public static final int REF_ID_FIELD_NUMBER = 1;
    private boolean hasRefId;
    private org.photovault.common.Types.UUID refId_;
    public boolean hasRefId() { return hasRefId; }
    public org.photovault.common.Types.UUID getRefId() { return refId_; }
    
    // optional .UUID folder_id = 2;
    public static final int FOLDER_ID_FIELD_NUMBER = 2;
    private boolean hasFolderId;
    private org.photovault.common.Types.UUID folderId_;
    public boolean hasFolderId() { return hasFolderId; }
    public org.photovault.common.Types.UUID getFolderId() { return folderId_; }
    
    // optional .UUID photo_id = 3;
    public static final int PHOTO_ID_FIELD_NUMBER = 3;
    private boolean hasPhotoId;
    private org.photovault.common.Types.UUID photoId_;
    public boolean hasPhotoId() { return hasPhotoId; }
    public org.photovault.common.Types.UUID getPhotoId() { return photoId_; }
    
    private void initFields() {
      refId_ = org.photovault.common.Types.UUID.getDefaultInstance();
      folderId_ = org.photovault.common.Types.UUID.getDefaultInstance();
      photoId_ = org.photovault.common.Types.UUID.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (hasRefId()) {
        if (!getRefId().isInitialized()) return false;
      }
      if (hasFolderId()) {
        if (!getFolderId().isInitialized()) return false;
      }
      if (hasPhotoId()) {
        if (!getPhotoId().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasRefId()) {
        output.writeMessage(1, getRefId());
      }
      if (hasFolderId()) {
        output.writeMessage(2, getFolderId());
      }
      if (hasPhotoId()) {
        output.writeMessage(3, getPhotoId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasRefId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getRefId());
      }
      if (hasFolderId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getFolderId());
      }
      if (hasPhotoId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getPhotoId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.imginfo.dto.ImageProtos.FolderRef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FolderRef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FolderRef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FolderRef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FolderRef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FolderRef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FolderRef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.FolderRef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.FolderRef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FolderRef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.imginfo.dto.ImageProtos.FolderRef prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.imginfo.dto.ImageProtos.FolderRef result;
      
      // Construct using org.photovault.imginfo.dto.ImageProtos.FolderRef.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.imginfo.dto.ImageProtos.FolderRef();
        return builder;
      }
      
      protected org.photovault.imginfo.dto.ImageProtos.FolderRef internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.imginfo.dto.ImageProtos.FolderRef();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.imginfo.dto.ImageProtos.FolderRef.getDescriptor();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.FolderRef getDefaultInstanceForType() {
        return org.photovault.imginfo.dto.ImageProtos.FolderRef.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.imginfo.dto.ImageProtos.FolderRef build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.imginfo.dto.ImageProtos.FolderRef buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.FolderRef buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.imginfo.dto.ImageProtos.FolderRef returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.imginfo.dto.ImageProtos.FolderRef) {
          return mergeFrom((org.photovault.imginfo.dto.ImageProtos.FolderRef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.imginfo.dto.ImageProtos.FolderRef other) {
        if (other == org.photovault.imginfo.dto.ImageProtos.FolderRef.getDefaultInstance()) return this;
        if (other.hasRefId()) {
          mergeRefId(other.getRefId());
        }
        if (other.hasFolderId()) {
          mergeFolderId(other.getFolderId());
        }
        if (other.hasPhotoId()) {
          mergePhotoId(other.getPhotoId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              org.photovault.common.Types.UUID.Builder subBuilder = org.photovault.common.Types.UUID.newBuilder();
              if (hasRefId()) {
                subBuilder.mergeFrom(getRefId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRefId(subBuilder.buildPartial());
              break;
            }
            case 18: {
              org.photovault.common.Types.UUID.Builder subBuilder = org.photovault.common.Types.UUID.newBuilder();
              if (hasFolderId()) {
                subBuilder.mergeFrom(getFolderId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFolderId(subBuilder.buildPartial());
              break;
            }
            case 26: {
              org.photovault.common.Types.UUID.Builder subBuilder = org.photovault.common.Types.UUID.newBuilder();
              if (hasPhotoId()) {
                subBuilder.mergeFrom(getPhotoId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPhotoId(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .UUID ref_id = 1;
      public boolean hasRefId() {
        return result.hasRefId();
      }
      public org.photovault.common.Types.UUID getRefId() {
        return result.getRefId();
      }
      public Builder setRefId(org.photovault.common.Types.UUID value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRefId = true;
        result.refId_ = value;
        return this;
      }
      public Builder setRefId(org.photovault.common.Types.UUID.Builder builderForValue) {
        result.hasRefId = true;
        result.refId_ = builderForValue.build();
        return this;
      }
      public Builder mergeRefId(org.photovault.common.Types.UUID value) {
        if (result.hasRefId() &&
            result.refId_ != org.photovault.common.Types.UUID.getDefaultInstance()) {
          result.refId_ =
            org.photovault.common.Types.UUID.newBuilder(result.refId_).mergeFrom(value).buildPartial();
        } else {
          result.refId_ = value;
        }
        result.hasRefId = true;
        return this;
      }
      public Builder clearRefId() {
        result.hasRefId = false;
        result.refId_ = org.photovault.common.Types.UUID.getDefaultInstance();
        return this;
      }
      
      // optional .UUID folder_id = 2;
      public boolean hasFolderId() {
        return result.hasFolderId();
      }
      public org.photovault.common.Types.UUID getFolderId() {
        return result.getFolderId();
      }
      public Builder setFolderId(org.photovault.common.Types.UUID value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFolderId = true;
        result.folderId_ = value;
        return this;
      }
      public Builder setFolderId(org.photovault.common.Types.UUID.Builder builderForValue) {
        result.hasFolderId = true;
        result.folderId_ = builderForValue.build();
        return this;
      }
      public Builder mergeFolderId(org.photovault.common.Types.UUID value) {
        if (result.hasFolderId() &&
            result.folderId_ != org.photovault.common.Types.UUID.getDefaultInstance()) {
          result.folderId_ =
            org.photovault.common.Types.UUID.newBuilder(result.folderId_).mergeFrom(value).buildPartial();
        } else {
          result.folderId_ = value;
        }
        result.hasFolderId = true;
        return this;
      }
      public Builder clearFolderId() {
        result.hasFolderId = false;
        result.folderId_ = org.photovault.common.Types.UUID.getDefaultInstance();
        return this;
      }
      
      // optional .UUID photo_id = 3;
      public boolean hasPhotoId() {
        return result.hasPhotoId();
      }
      public org.photovault.common.Types.UUID getPhotoId() {
        return result.getPhotoId();
      }
      public Builder setPhotoId(org.photovault.common.Types.UUID value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasPhotoId = true;
        result.photoId_ = value;
        return this;
      }
      public Builder setPhotoId(org.photovault.common.Types.UUID.Builder builderForValue) {
        result.hasPhotoId = true;
        result.photoId_ = builderForValue.build();
        return this;
      }
      public Builder mergePhotoId(org.photovault.common.Types.UUID value) {
        if (result.hasPhotoId() &&
            result.photoId_ != org.photovault.common.Types.UUID.getDefaultInstance()) {
          result.photoId_ =
            org.photovault.common.Types.UUID.newBuilder(result.photoId_).mergeFrom(value).buildPartial();
        } else {
          result.photoId_ = value;
        }
        result.hasPhotoId = true;
        return this;
      }
      public Builder clearPhotoId() {
        result.hasPhotoId = false;
        result.photoId_ = org.photovault.common.Types.UUID.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:FolderRef)
    }
    
    static {
      defaultInstance = new FolderRef(true);
      org.photovault.imginfo.dto.ImageProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:FolderRef)
  }
  
  public static final class Volume extends
      com.google.protobuf.GeneratedMessage {
    // Use Volume.newBuilder() to construct.
    private Volume() {
      initFields();
    }
    private Volume(boolean noInit) {}
    
    private static final Volume defaultInstance;
    public static Volume getDefaultInstance() {
      return defaultInstance;
    }
    
    public Volume getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_Volume_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_Volume_fieldAccessorTable;
    }
    
    // required .VolumeType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private org.photovault.imginfo.dto.ImageProtos.VolumeType type_;
    public boolean hasType() { return hasType; }
    public org.photovault.imginfo.dto.ImageProtos.VolumeType getType() { return type_; }
    
    // required .UUID uuid = 2;
    public static final int UUID_FIELD_NUMBER = 2;
    private boolean hasUuid;
    private org.photovault.common.Types.UUID uuid_;
    public boolean hasUuid() { return hasUuid; }
    public org.photovault.common.Types.UUID getUuid() { return uuid_; }
    
    private void initFields() {
      type_ = org.photovault.imginfo.dto.ImageProtos.VolumeType.EXTERNAL;
      uuid_ = org.photovault.common.Types.UUID.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasType) return false;
      if (!hasUuid) return false;
      if (!getUuid().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasUuid()) {
        output.writeMessage(2, getUuid());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasUuid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getUuid());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.imginfo.dto.ImageProtos.Volume parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Volume parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Volume parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Volume parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Volume parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Volume parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Volume parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.Volume parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.Volume parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.Volume parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.imginfo.dto.ImageProtos.Volume prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.imginfo.dto.ImageProtos.Volume result;
      
      // Construct using org.photovault.imginfo.dto.ImageProtos.Volume.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.imginfo.dto.ImageProtos.Volume();
        return builder;
      }
      
      protected org.photovault.imginfo.dto.ImageProtos.Volume internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.imginfo.dto.ImageProtos.Volume();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.imginfo.dto.ImageProtos.Volume.getDescriptor();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.Volume getDefaultInstanceForType() {
        return org.photovault.imginfo.dto.ImageProtos.Volume.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.imginfo.dto.ImageProtos.Volume build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.imginfo.dto.ImageProtos.Volume buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.Volume buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.imginfo.dto.ImageProtos.Volume returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.imginfo.dto.ImageProtos.Volume) {
          return mergeFrom((org.photovault.imginfo.dto.ImageProtos.Volume)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.imginfo.dto.ImageProtos.Volume other) {
        if (other == org.photovault.imginfo.dto.ImageProtos.Volume.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasUuid()) {
          mergeUuid(other.getUuid());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.photovault.imginfo.dto.ImageProtos.VolumeType value = org.photovault.imginfo.dto.ImageProtos.VolumeType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                setType(value);
              }
              break;
            }
            case 18: {
              org.photovault.common.Types.UUID.Builder subBuilder = org.photovault.common.Types.UUID.newBuilder();
              if (hasUuid()) {
                subBuilder.mergeFrom(getUuid());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setUuid(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .VolumeType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public org.photovault.imginfo.dto.ImageProtos.VolumeType getType() {
        return result.getType();
      }
      public Builder setType(org.photovault.imginfo.dto.ImageProtos.VolumeType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = org.photovault.imginfo.dto.ImageProtos.VolumeType.EXTERNAL;
        return this;
      }
      
      // required .UUID uuid = 2;
      public boolean hasUuid() {
        return result.hasUuid();
      }
      public org.photovault.common.Types.UUID getUuid() {
        return result.getUuid();
      }
      public Builder setUuid(org.photovault.common.Types.UUID value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasUuid = true;
        result.uuid_ = value;
        return this;
      }
      public Builder setUuid(org.photovault.common.Types.UUID.Builder builderForValue) {
        result.hasUuid = true;
        result.uuid_ = builderForValue.build();
        return this;
      }
      public Builder mergeUuid(org.photovault.common.Types.UUID value) {
        if (result.hasUuid() &&
            result.uuid_ != org.photovault.common.Types.UUID.getDefaultInstance()) {
          result.uuid_ =
            org.photovault.common.Types.UUID.newBuilder(result.uuid_).mergeFrom(value).buildPartial();
        } else {
          result.uuid_ = value;
        }
        result.hasUuid = true;
        return this;
      }
      public Builder clearUuid() {
        result.hasUuid = false;
        result.uuid_ = org.photovault.common.Types.UUID.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Volume)
    }
    
    static {
      defaultInstance = new Volume(true);
      org.photovault.imginfo.dto.ImageProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Volume)
  }
  
  public static final class FileLocation extends
      com.google.protobuf.GeneratedMessage {
    // Use FileLocation.newBuilder() to construct.
    private FileLocation() {
      initFields();
    }
    private FileLocation(boolean noInit) {}
    
    private static final FileLocation defaultInstance;
    public static FileLocation getDefaultInstance() {
      return defaultInstance;
    }
    
    public FileLocation getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_FileLocation_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_FileLocation_fieldAccessorTable;
    }
    
    // required .Volume volume = 1;
    public static final int VOLUME_FIELD_NUMBER = 1;
    private boolean hasVolume;
    private org.photovault.imginfo.dto.ImageProtos.Volume volume_;
    public boolean hasVolume() { return hasVolume; }
    public org.photovault.imginfo.dto.ImageProtos.Volume getVolume() { return volume_; }
    
    // required string path = 2;
    public static final int PATH_FIELD_NUMBER = 2;
    private boolean hasPath;
    private java.lang.String path_ = "";
    public boolean hasPath() { return hasPath; }
    public java.lang.String getPath() { return path_; }
    
    // optional uint64 last_modified_time = 3;
    public static final int LAST_MODIFIED_TIME_FIELD_NUMBER = 3;
    private boolean hasLastModifiedTime;
    private long lastModifiedTime_ = 0L;
    public boolean hasLastModifiedTime() { return hasLastModifiedTime; }
    public long getLastModifiedTime() { return lastModifiedTime_; }
    
    private void initFields() {
      volume_ = org.photovault.imginfo.dto.ImageProtos.Volume.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasVolume) return false;
      if (!hasPath) return false;
      if (!getVolume().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasVolume()) {
        output.writeMessage(1, getVolume());
      }
      if (hasPath()) {
        output.writeString(2, getPath());
      }
      if (hasLastModifiedTime()) {
        output.writeUInt64(3, getLastModifiedTime());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasVolume()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getVolume());
      }
      if (hasPath()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getPath());
      }
      if (hasLastModifiedTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, getLastModifiedTime());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.imginfo.dto.ImageProtos.FileLocation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FileLocation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FileLocation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FileLocation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FileLocation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FileLocation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FileLocation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.FileLocation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.FileLocation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.FileLocation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.imginfo.dto.ImageProtos.FileLocation prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.imginfo.dto.ImageProtos.FileLocation result;
      
      // Construct using org.photovault.imginfo.dto.ImageProtos.FileLocation.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.imginfo.dto.ImageProtos.FileLocation();
        return builder;
      }
      
      protected org.photovault.imginfo.dto.ImageProtos.FileLocation internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.imginfo.dto.ImageProtos.FileLocation();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.imginfo.dto.ImageProtos.FileLocation.getDescriptor();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.FileLocation getDefaultInstanceForType() {
        return org.photovault.imginfo.dto.ImageProtos.FileLocation.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.imginfo.dto.ImageProtos.FileLocation build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.imginfo.dto.ImageProtos.FileLocation buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.FileLocation buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.imginfo.dto.ImageProtos.FileLocation returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.imginfo.dto.ImageProtos.FileLocation) {
          return mergeFrom((org.photovault.imginfo.dto.ImageProtos.FileLocation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.imginfo.dto.ImageProtos.FileLocation other) {
        if (other == org.photovault.imginfo.dto.ImageProtos.FileLocation.getDefaultInstance()) return this;
        if (other.hasVolume()) {
          mergeVolume(other.getVolume());
        }
        if (other.hasPath()) {
          setPath(other.getPath());
        }
        if (other.hasLastModifiedTime()) {
          setLastModifiedTime(other.getLastModifiedTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              org.photovault.imginfo.dto.ImageProtos.Volume.Builder subBuilder = org.photovault.imginfo.dto.ImageProtos.Volume.newBuilder();
              if (hasVolume()) {
                subBuilder.mergeFrom(getVolume());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setVolume(subBuilder.buildPartial());
              break;
            }
            case 18: {
              setPath(input.readString());
              break;
            }
            case 24: {
              setLastModifiedTime(input.readUInt64());
              break;
            }
          }
        }
      }
      
      
      // required .Volume volume = 1;
      public boolean hasVolume() {
        return result.hasVolume();
      }
      public org.photovault.imginfo.dto.ImageProtos.Volume getVolume() {
        return result.getVolume();
      }
      public Builder setVolume(org.photovault.imginfo.dto.ImageProtos.Volume value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder setVolume(org.photovault.imginfo.dto.ImageProtos.Volume.Builder builderForValue) {
        result.hasVolume = true;
        result.volume_ = builderForValue.build();
        return this;
      }
      public Builder mergeVolume(org.photovault.imginfo.dto.ImageProtos.Volume value) {
        if (result.hasVolume() &&
            result.volume_ != org.photovault.imginfo.dto.ImageProtos.Volume.getDefaultInstance()) {
          result.volume_ =
            org.photovault.imginfo.dto.ImageProtos.Volume.newBuilder(result.volume_).mergeFrom(value).buildPartial();
        } else {
          result.volume_ = value;
        }
        result.hasVolume = true;
        return this;
      }
      public Builder clearVolume() {
        result.hasVolume = false;
        result.volume_ = org.photovault.imginfo.dto.ImageProtos.Volume.getDefaultInstance();
        return this;
      }
      
      // required string path = 2;
      public boolean hasPath() {
        return result.hasPath();
      }
      public java.lang.String getPath() {
        return result.getPath();
      }
      public Builder setPath(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasPath = true;
        result.path_ = value;
        return this;
      }
      public Builder clearPath() {
        result.hasPath = false;
        result.path_ = getDefaultInstance().getPath();
        return this;
      }
      
      // optional uint64 last_modified_time = 3;
      public boolean hasLastModifiedTime() {
        return result.hasLastModifiedTime();
      }
      public long getLastModifiedTime() {
        return result.getLastModifiedTime();
      }
      public Builder setLastModifiedTime(long value) {
        result.hasLastModifiedTime = true;
        result.lastModifiedTime_ = value;
        return this;
      }
      public Builder clearLastModifiedTime() {
        result.hasLastModifiedTime = false;
        result.lastModifiedTime_ = 0L;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:FileLocation)
    }
    
    static {
      defaultInstance = new FileLocation(true);
      org.photovault.imginfo.dto.ImageProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:FileLocation)
  }
  
  public static final class TimeRange extends
      com.google.protobuf.GeneratedMessage {
    // Use TimeRange.newBuilder() to construct.
    private TimeRange() {
      initFields();
    }
    private TimeRange(boolean noInit) {}
    
    private static final TimeRange defaultInstance;
    public static TimeRange getDefaultInstance() {
      return defaultInstance;
    }
    
    public TimeRange getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_TimeRange_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_TimeRange_fieldAccessorTable;
    }
    
    // required int64 midpoint_msec = 1;
    public static final int MIDPOINT_MSEC_FIELD_NUMBER = 1;
    private boolean hasMidpointMsec;
    private long midpointMsec_ = 0L;
    public boolean hasMidpointMsec() { return hasMidpointMsec; }
    public long getMidpointMsec() { return midpointMsec_; }
    
    // required uint64 accuracy_msec = 2 [default = 0];
    public static final int ACCURACY_MSEC_FIELD_NUMBER = 2;
    private boolean hasAccuracyMsec;
    private long accuracyMsec_ = 0L;
    public boolean hasAccuracyMsec() { return hasAccuracyMsec; }
    public long getAccuracyMsec() { return accuracyMsec_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasMidpointMsec) return false;
      if (!hasAccuracyMsec) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasMidpointMsec()) {
        output.writeInt64(1, getMidpointMsec());
      }
      if (hasAccuracyMsec()) {
        output.writeUInt64(2, getAccuracyMsec());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasMidpointMsec()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, getMidpointMsec());
      }
      if (hasAccuracyMsec()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, getAccuracyMsec());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.imginfo.dto.ImageProtos.TimeRange parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.TimeRange parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.TimeRange parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.TimeRange parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.TimeRange parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.TimeRange parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.TimeRange parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.TimeRange parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.TimeRange parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.TimeRange parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.imginfo.dto.ImageProtos.TimeRange prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.imginfo.dto.ImageProtos.TimeRange result;
      
      // Construct using org.photovault.imginfo.dto.ImageProtos.TimeRange.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.imginfo.dto.ImageProtos.TimeRange();
        return builder;
      }
      
      protected org.photovault.imginfo.dto.ImageProtos.TimeRange internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.imginfo.dto.ImageProtos.TimeRange();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.imginfo.dto.ImageProtos.TimeRange.getDescriptor();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.TimeRange getDefaultInstanceForType() {
        return org.photovault.imginfo.dto.ImageProtos.TimeRange.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.imginfo.dto.ImageProtos.TimeRange build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.imginfo.dto.ImageProtos.TimeRange buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.TimeRange buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.photovault.imginfo.dto.ImageProtos.TimeRange returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.imginfo.dto.ImageProtos.TimeRange) {
          return mergeFrom((org.photovault.imginfo.dto.ImageProtos.TimeRange)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.imginfo.dto.ImageProtos.TimeRange other) {
        if (other == org.photovault.imginfo.dto.ImageProtos.TimeRange.getDefaultInstance()) return this;
        if (other.hasMidpointMsec()) {
          setMidpointMsec(other.getMidpointMsec());
        }
        if (other.hasAccuracyMsec()) {
          setAccuracyMsec(other.getAccuracyMsec());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setMidpointMsec(input.readInt64());
              break;
            }
            case 16: {
              setAccuracyMsec(input.readUInt64());
              break;
            }
          }
        }
      }
      
      
      // required int64 midpoint_msec = 1;
      public boolean hasMidpointMsec() {
        return result.hasMidpointMsec();
      }
      public long getMidpointMsec() {
        return result.getMidpointMsec();
      }
      public Builder setMidpointMsec(long value) {
        result.hasMidpointMsec = true;
        result.midpointMsec_ = value;
        return this;
      }
      public Builder clearMidpointMsec() {
        result.hasMidpointMsec = false;
        result.midpointMsec_ = 0L;
        return this;
      }
      
      // required uint64 accuracy_msec = 2 [default = 0];
      public boolean hasAccuracyMsec() {
        return result.hasAccuracyMsec();
      }
      public long getAccuracyMsec() {
        return result.getAccuracyMsec();
      }
      public Builder setAccuracyMsec(long value) {
        result.hasAccuracyMsec = true;
        result.accuracyMsec_ = value;
        return this;
      }
      public Builder clearAccuracyMsec() {
        result.hasAccuracyMsec = false;
        result.accuracyMsec_ = 0L;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:TimeRange)
    }
    
    static {
      defaultInstance = new TimeRange(true);
      org.photovault.imginfo.dto.ImageProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:TimeRange)
  }
  
  public static final class PhotovaultData extends
      com.google.protobuf.GeneratedMessage {
    // Use PhotovaultData.newBuilder() to construct.
    private PhotovaultData() {
      initFields();
    }
    private PhotovaultData(boolean noInit) {}
    
    private static final PhotovaultData defaultInstance;
    public static PhotovaultData getDefaultInstance() {
      return defaultInstance;
    }
    
    public PhotovaultData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_PhotovaultData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.photovault.imginfo.dto.ImageProtos.internal_static_PhotovaultData_fieldAccessorTable;
    }
    
    // optional string comment = 1;
    public static final int COMMENT_FIELD_NUMBER = 1;
    private boolean hasComment;
    private java.lang.String comment_ = "";
    public boolean hasComment() { return hasComment; }
    public java.lang.String getComment() { return comment_; }
    
    // repeated .ImageFile files = 2;
    public static final int FILES_FIELD_NUMBER = 2;
    private java.util.List<org.photovault.imginfo.dto.ImageProtos.ImageFile> files_ =
      java.util.Collections.emptyList();
    public java.util.List<org.photovault.imginfo.dto.ImageProtos.ImageFile> getFilesList() {
      return files_;
    }
    public int getFilesCount() { return files_.size(); }
    public org.photovault.imginfo.dto.ImageProtos.ImageFile getFiles(int index) {
      return files_.get(index);
    }
    
    // repeated .ChangeEnvelope changes = 3;
    public static final int CHANGES_FIELD_NUMBER = 3;
    private java.util.List<org.photovault.replication.ChangeProtos.ChangeEnvelope> changes_ =
      java.util.Collections.emptyList();
    public java.util.List<org.photovault.replication.ChangeProtos.ChangeEnvelope> getChangesList() {
      return changes_;
    }
    public int getChangesCount() { return changes_.size(); }
    public org.photovault.replication.ChangeProtos.ChangeEnvelope getChanges(int index) {
      return changes_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (org.photovault.imginfo.dto.ImageProtos.ImageFile element : getFilesList()) {
        if (!element.isInitialized()) return false;
      }
      for (org.photovault.replication.ChangeProtos.ChangeEnvelope element : getChangesList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasComment()) {
        output.writeString(1, getComment());
      }
      for (org.photovault.imginfo.dto.ImageProtos.ImageFile element : getFilesList()) {
        output.writeMessage(2, element);
      }
      for (org.photovault.replication.ChangeProtos.ChangeEnvelope element : getChangesList()) {
        output.writeMessage(3, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasComment()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getComment());
      }
      for (org.photovault.imginfo.dto.ImageProtos.ImageFile element : getFilesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      for (org.photovault.replication.ChangeProtos.ChangeEnvelope element : getChangesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.photovault.imginfo.dto.ImageProtos.PhotovaultData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.PhotovaultData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.PhotovaultData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.PhotovaultData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.PhotovaultData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.PhotovaultData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.PhotovaultData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.PhotovaultData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.photovault.imginfo.dto.ImageProtos.PhotovaultData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.photovault.imginfo.dto.ImageProtos.PhotovaultData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.photovault.imginfo.dto.ImageProtos.PhotovaultData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private org.photovault.imginfo.dto.ImageProtos.PhotovaultData result;
      
      // Construct using org.photovault.imginfo.dto.ImageProtos.PhotovaultData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.photovault.imginfo.dto.ImageProtos.PhotovaultData();
        return builder;
      }
      
      protected org.photovault.imginfo.dto.ImageProtos.PhotovaultData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.photovault.imginfo.dto.ImageProtos.PhotovaultData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.photovault.imginfo.dto.ImageProtos.PhotovaultData.getDescriptor();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.PhotovaultData getDefaultInstanceForType() {
        return org.photovault.imginfo.dto.ImageProtos.PhotovaultData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.photovault.imginfo.dto.ImageProtos.PhotovaultData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.photovault.imginfo.dto.ImageProtos.PhotovaultData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.photovault.imginfo.dto.ImageProtos.PhotovaultData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.files_ != java.util.Collections.EMPTY_LIST) {
          result.files_ =
            java.util.Collections.unmodifiableList(result.files_);
        }
        if (result.changes_ != java.util.Collections.EMPTY_LIST) {
          result.changes_ =
            java.util.Collections.unmodifiableList(result.changes_);
        }
        org.photovault.imginfo.dto.ImageProtos.PhotovaultData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.photovault.imginfo.dto.ImageProtos.PhotovaultData) {
          return mergeFrom((org.photovault.imginfo.dto.ImageProtos.PhotovaultData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.photovault.imginfo.dto.ImageProtos.PhotovaultData other) {
        if (other == org.photovault.imginfo.dto.ImageProtos.PhotovaultData.getDefaultInstance()) return this;
        if (other.hasComment()) {
          setComment(other.getComment());
        }
        if (!other.files_.isEmpty()) {
          if (result.files_.isEmpty()) {
            result.files_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.ImageFile>();
          }
          result.files_.addAll(other.files_);
        }
        if (!other.changes_.isEmpty()) {
          if (result.changes_.isEmpty()) {
            result.changes_ = new java.util.ArrayList<org.photovault.replication.ChangeProtos.ChangeEnvelope>();
          }
          result.changes_.addAll(other.changes_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setComment(input.readString());
              break;
            }
            case 18: {
              org.photovault.imginfo.dto.ImageProtos.ImageFile.Builder subBuilder = org.photovault.imginfo.dto.ImageProtos.ImageFile.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addFiles(subBuilder.buildPartial());
              break;
            }
            case 26: {
              org.photovault.replication.ChangeProtos.ChangeEnvelope.Builder subBuilder = org.photovault.replication.ChangeProtos.ChangeEnvelope.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addChanges(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional string comment = 1;
      public boolean hasComment() {
        return result.hasComment();
      }
      public java.lang.String getComment() {
        return result.getComment();
      }
      public Builder setComment(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasComment = true;
        result.comment_ = value;
        return this;
      }
      public Builder clearComment() {
        result.hasComment = false;
        result.comment_ = getDefaultInstance().getComment();
        return this;
      }
      
      // repeated .ImageFile files = 2;
      public java.util.List<org.photovault.imginfo.dto.ImageProtos.ImageFile> getFilesList() {
        return java.util.Collections.unmodifiableList(result.files_);
      }
      public int getFilesCount() {
        return result.getFilesCount();
      }
      public org.photovault.imginfo.dto.ImageProtos.ImageFile getFiles(int index) {
        return result.getFiles(index);
      }
      public Builder setFiles(int index, org.photovault.imginfo.dto.ImageProtos.ImageFile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.files_.set(index, value);
        return this;
      }
      public Builder setFiles(int index, org.photovault.imginfo.dto.ImageProtos.ImageFile.Builder builderForValue) {
        result.files_.set(index, builderForValue.build());
        return this;
      }
      public Builder addFiles(org.photovault.imginfo.dto.ImageProtos.ImageFile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.files_.isEmpty()) {
          result.files_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.ImageFile>();
        }
        result.files_.add(value);
        return this;
      }
      public Builder addFiles(org.photovault.imginfo.dto.ImageProtos.ImageFile.Builder builderForValue) {
        if (result.files_.isEmpty()) {
          result.files_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.ImageFile>();
        }
        result.files_.add(builderForValue.build());
        return this;
      }
      public Builder addAllFiles(
          java.lang.Iterable<? extends org.photovault.imginfo.dto.ImageProtos.ImageFile> values) {
        if (result.files_.isEmpty()) {
          result.files_ = new java.util.ArrayList<org.photovault.imginfo.dto.ImageProtos.ImageFile>();
        }
        super.addAll(values, result.files_);
        return this;
      }
      public Builder clearFiles() {
        result.files_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .ChangeEnvelope changes = 3;
      public java.util.List<org.photovault.replication.ChangeProtos.ChangeEnvelope> getChangesList() {
        return java.util.Collections.unmodifiableList(result.changes_);
      }
      public int getChangesCount() {
        return result.getChangesCount();
      }
      public org.photovault.replication.ChangeProtos.ChangeEnvelope getChanges(int index) {
        return result.getChanges(index);
      }
      public Builder setChanges(int index, org.photovault.replication.ChangeProtos.ChangeEnvelope value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.changes_.set(index, value);
        return this;
      }
      public Builder setChanges(int index, org.photovault.replication.ChangeProtos.ChangeEnvelope.Builder builderForValue) {
        result.changes_.set(index, builderForValue.build());
        return this;
      }
      public Builder addChanges(org.photovault.replication.ChangeProtos.ChangeEnvelope value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.changes_.isEmpty()) {
          result.changes_ = new java.util.ArrayList<org.photovault.replication.ChangeProtos.ChangeEnvelope>();
        }
        result.changes_.add(value);
        return this;
      }
      public Builder addChanges(org.photovault.replication.ChangeProtos.ChangeEnvelope.Builder builderForValue) {
        if (result.changes_.isEmpty()) {
          result.changes_ = new java.util.ArrayList<org.photovault.replication.ChangeProtos.ChangeEnvelope>();
        }
        result.changes_.add(builderForValue.build());
        return this;
      }
      public Builder addAllChanges(
          java.lang.Iterable<? extends org.photovault.replication.ChangeProtos.ChangeEnvelope> values) {
        if (result.changes_.isEmpty()) {
          result.changes_ = new java.util.ArrayList<org.photovault.replication.ChangeProtos.ChangeEnvelope>();
        }
        super.addAll(values, result.changes_);
        return this;
      }
      public Builder clearChanges() {
        result.changes_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:PhotovaultData)
    }
    
    static {
      defaultInstance = new PhotovaultData(true);
      org.photovault.imginfo.dto.ImageProtos.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:PhotovaultData)
  }
  
  public static final int IMAGE_FIELD_NUMBER = 100;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.imginfo.dto.ImageProtos.Image> image =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int IMAFE_FILE_FIELD_NUMBER = 101;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.imginfo.dto.ImageProtos.ImageFile> imafeFile =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int IMAGE_REF_FIELD_NUMBER = 102;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.imginfo.dto.ImageProtos.ImageRef> imageRef =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int VOLUME_FIELD_NUMBER = 103;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.imginfo.dto.ImageProtos.Volume> volume =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int FILE_LOCATION_FIELD_NUMBER = 104;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.imginfo.dto.ImageProtos.FileLocation> fileLocation =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int IMAGE_OP_CHAIN_FIELD_NUMBER = 105;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.image.ImageOpDto.ImageOpChain> imageOpChain =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int DCRAW_OP_FIELD_NUMBER = 106;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.image.ImageOpDto.DCRawOp> dcrawOp =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int RAW_MAP_OP_FIELD_NUMBER = 107;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.image.ImageOpDto.DCRawMapOp> rawMapOp =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int CHAN_MAP_OP_FIELD_NUMBER = 108;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.image.ImageOpDto.ChanMapOp> chanMapOp =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int CROP_OP_FIELD_NUMBER = 109;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.image.ImageOpDto.CropOp> cropOp =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int COLOR_CURVE_FIELD_NUMBER = 110;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.image.ImageOpDto.ColorCurve> colorCurve =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int TIME_RANGE_FIELD_NUMBER = 111;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.imginfo.dto.ImageProtos.TimeRange> timeRange =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  public static final int FOLDER_REF_FIELD_NUMBER = 112;
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      org.photovault.replication.ChangeProtos.ValueChange,
      org.photovault.imginfo.dto.ImageProtos.FolderRef> folderRef =
        com.google.protobuf.GeneratedMessage
          .newGeneratedExtension();
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Image_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Image_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ImageFile_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ImageFile_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ImageRef_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ImageRef_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_FolderRef_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_FolderRef_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Volume_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Volume_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_FileLocation_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_FileLocation_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_TimeRange_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_TimeRange_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_PhotovaultData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_PhotovaultData_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022image_protos.proto\032\022image_op_dto.proto" +
      "\032\013types.proto\032\023change_protos.proto\"\221\001\n\005I" +
      "mage\022\030\n\004type\030\001 \002(\0162\n.ImageType\022\017\n\007locato" +
      "r\030\002 \002(\t\022\r\n\005width\030\003 \002(\r\022\016\n\006height\030\004 \002(\r\022\033" +
      "\n\010original\030\005 \001(\0132\t.ImageRef\022!\n\nprocessin" +
      "g\030\006 \001(\0132\r.ImageOpChain\"z\n\tImageFile\022\020\n\010m" +
      "d5_hash\030\001 \002(\014\022\023\n\004uuid\030\002 \002(\0132\005.UUID\022\014\n\004si" +
      "ze\030\003 \002(\004\022\026\n\006images\030\004 \003(\0132\006.Image\022 \n\tloca" +
      "tions\030\005 \003(\0132\r.FileLocation\"X\n\010ImageRef\022\030" +
      "\n\tfile_uuid\030\001 \002(\0132\005.UUID\022\017\n\007locator\030\002 \002(",
      "\t\022!\n\roriginal_file\030\003 \001(\0132\n.ImageFile\"U\n\t" +
      "FolderRef\022\025\n\006ref_id\030\001 \001(\0132\005.UUID\022\030\n\tfold" +
      "er_id\030\002 \001(\0132\005.UUID\022\027\n\010photo_id\030\003 \001(\0132\005.U" +
      "UID\"8\n\006Volume\022\031\n\004type\030\001 \002(\0162\013.VolumeType" +
      "\022\023\n\004uuid\030\002 \002(\0132\005.UUID\"Q\n\014FileLocation\022\027\n" +
      "\006volume\030\001 \002(\0132\007.Volume\022\014\n\004path\030\002 \002(\t\022\032\n\022" +
      "last_modified_time\030\003 \001(\004\"<\n\tTimeRange\022\025\n" +
      "\rmidpoint_msec\030\001 \002(\003\022\030\n\raccuracy_msec\030\002 " +
      "\002(\004:\0010\"^\n\016PhotovaultData\022\017\n\007comment\030\001 \001(" +
      "\t\022\031\n\005files\030\002 \003(\0132\n.ImageFile\022 \n\007changes\030",
      "\003 \003(\0132\017.ChangeEnvelope*#\n\tImageType\022\014\n\010O" +
      "RIGINAL\020\001\022\010\n\004COPY\020\002*$\n\nVolumeType\022\014\n\010EXT" +
      "ERNAL\020\001\022\010\n\004TRAD\020\002:#\n\005image\022\014.ValueChange" +
      "\030d \001(\0132\006.Image:,\n\nimafe_file\022\014.ValueChan" +
      "ge\030e \001(\0132\n.ImageFile:*\n\timage_ref\022\014.Valu" +
      "eChange\030f \001(\0132\t.ImageRef:%\n\006volume\022\014.Val" +
      "ueChange\030g \001(\0132\007.Volume:2\n\rfile_location" +
      "\022\014.ValueChange\030h \001(\0132\r.FileLocation:3\n\016i" +
      "mage_op_chain\022\014.ValueChange\030i \001(\0132\r.Imag" +
      "eOpChain:(\n\010dcraw_op\022\014.ValueChange\030j \001(\013",
      "2\010.DCRawOp:-\n\nraw_map_op\022\014.ValueChange\030k" +
      " \001(\0132\013.DCRawMapOp:-\n\013chan_map_op\022\014.Value" +
      "Change\030l \001(\0132\n.ChanMapOp:&\n\007crop_op\022\014.Va" +
      "lueChange\030m \001(\0132\007.CropOp:.\n\013color_curve\022" +
      "\014.ValueChange\030n \001(\0132\013.ColorCurve:,\n\ntime" +
      "_range\022\014.ValueChange\030o \001(\0132\n.TimeRange:," +
      "\n\nfolder_ref\022\014.ValueChange\030p \001(\0132\n.Folde" +
      "rRefB\037\n\032org.photovault.imginfo.dto\210\001\000"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_Image_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_Image_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Image_descriptor,
              new java.lang.String[] { "Type", "Locator", "Width", "Height", "Original", "Processing", },
              org.photovault.imginfo.dto.ImageProtos.Image.class,
              org.photovault.imginfo.dto.ImageProtos.Image.Builder.class);
          internal_static_ImageFile_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_ImageFile_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ImageFile_descriptor,
              new java.lang.String[] { "Md5Hash", "Uuid", "Size", "Images", "Locations", },
              org.photovault.imginfo.dto.ImageProtos.ImageFile.class,
              org.photovault.imginfo.dto.ImageProtos.ImageFile.Builder.class);
          internal_static_ImageRef_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_ImageRef_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ImageRef_descriptor,
              new java.lang.String[] { "FileUuid", "Locator", "OriginalFile", },
              org.photovault.imginfo.dto.ImageProtos.ImageRef.class,
              org.photovault.imginfo.dto.ImageProtos.ImageRef.Builder.class);
          internal_static_FolderRef_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_FolderRef_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_FolderRef_descriptor,
              new java.lang.String[] { "RefId", "FolderId", "PhotoId", },
              org.photovault.imginfo.dto.ImageProtos.FolderRef.class,
              org.photovault.imginfo.dto.ImageProtos.FolderRef.Builder.class);
          internal_static_Volume_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_Volume_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Volume_descriptor,
              new java.lang.String[] { "Type", "Uuid", },
              org.photovault.imginfo.dto.ImageProtos.Volume.class,
              org.photovault.imginfo.dto.ImageProtos.Volume.Builder.class);
          internal_static_FileLocation_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_FileLocation_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_FileLocation_descriptor,
              new java.lang.String[] { "Volume", "Path", "LastModifiedTime", },
              org.photovault.imginfo.dto.ImageProtos.FileLocation.class,
              org.photovault.imginfo.dto.ImageProtos.FileLocation.Builder.class);
          internal_static_TimeRange_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_TimeRange_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_TimeRange_descriptor,
              new java.lang.String[] { "MidpointMsec", "AccuracyMsec", },
              org.photovault.imginfo.dto.ImageProtos.TimeRange.class,
              org.photovault.imginfo.dto.ImageProtos.TimeRange.Builder.class);
          internal_static_PhotovaultData_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_PhotovaultData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_PhotovaultData_descriptor,
              new java.lang.String[] { "Comment", "Files", "Changes", },
              org.photovault.imginfo.dto.ImageProtos.PhotovaultData.class,
              org.photovault.imginfo.dto.ImageProtos.PhotovaultData.Builder.class);
          org.photovault.imginfo.dto.ImageProtos.image.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(0),
              org.photovault.imginfo.dto.ImageProtos.Image.class);
          org.photovault.imginfo.dto.ImageProtos.imafeFile.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(1),
              org.photovault.imginfo.dto.ImageProtos.ImageFile.class);
          org.photovault.imginfo.dto.ImageProtos.imageRef.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(2),
              org.photovault.imginfo.dto.ImageProtos.ImageRef.class);
          org.photovault.imginfo.dto.ImageProtos.volume.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(3),
              org.photovault.imginfo.dto.ImageProtos.Volume.class);
          org.photovault.imginfo.dto.ImageProtos.fileLocation.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(4),
              org.photovault.imginfo.dto.ImageProtos.FileLocation.class);
          org.photovault.imginfo.dto.ImageProtos.imageOpChain.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(5),
              org.photovault.image.ImageOpDto.ImageOpChain.class);
          org.photovault.imginfo.dto.ImageProtos.dcrawOp.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(6),
              org.photovault.image.ImageOpDto.DCRawOp.class);
          org.photovault.imginfo.dto.ImageProtos.rawMapOp.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(7),
              org.photovault.image.ImageOpDto.DCRawMapOp.class);
          org.photovault.imginfo.dto.ImageProtos.chanMapOp.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(8),
              org.photovault.image.ImageOpDto.ChanMapOp.class);
          org.photovault.imginfo.dto.ImageProtos.cropOp.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(9),
              org.photovault.image.ImageOpDto.CropOp.class);
          org.photovault.imginfo.dto.ImageProtos.colorCurve.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(10),
              org.photovault.image.ImageOpDto.ColorCurve.class);
          org.photovault.imginfo.dto.ImageProtos.timeRange.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(11),
              org.photovault.imginfo.dto.ImageProtos.TimeRange.class);
          org.photovault.imginfo.dto.ImageProtos.folderRef.internalInit(
              org.photovault.imginfo.dto.ImageProtos.getDescriptor().getExtensions().get(12),
              org.photovault.imginfo.dto.ImageProtos.FolderRef.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.photovault.image.ImageOpDto.getDescriptor(),
          org.photovault.common.Types.getDescriptor(),
          org.photovault.replication.ChangeProtos.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
