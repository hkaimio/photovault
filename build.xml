<project name="PhotoVault" default="dist" basedir=".">
    <description>
        Photo archiving system
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="lib"  location="lib"/>
  <property name="basedir" location="."/>
  <property name="junittest.properties" value="junittest.properties"/>
  <property name="junittest.configfile" value="conf/junittest_config.xml"/>
  
  <property file="build.properties"/> 

   	
  <!-- Checkstyle ant task definition -->
  <taskdef resource="checkstyletask.properties"
            classpath="lib/checkstyle-all-4.0-beta6.jar"/>
            
  <path id="runtime.path">
      <fileset id="runtime.fileset" dir="${build.lib.dir}">
          <include name="db-ojb-1.0.3.jar"/>
          <include name="exif_extract.jar"/>
          <include name="jai_codec.jar"/>
          <include name="jai_core.jar"/>
          <include name="mysql-connector-java.jar"/>
          <include name="log4j-1.2.12.jar"/>
          <include name="commons-*.jar"/>
          <include name="antlr.jar"/>
          <include name="swing-layout-*.jar"/>
          <include name="DdlUtils-*"/>
          <include name="derby.jar"/>
      </fileset>
  </path>
  <path id="project.class.path">
    <fileset dir="${build.lib.dir}">
	<include name="**/*.jar"/>
        <exclude name="**/checkstyle*.jar"/>
    </fileset>
    <pathelement path="${java.class.path}/"/>
    <pathelement path="build"/>
    <pathelement path="conf"/>
  </path>

<path id="debug.sourcepath" >
    <pathelement path="src"/>
</path>
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source " >


    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="on" classpathref="project.class.path"/>
    <copy todir="${build}">
        <fileset dir="${src}">
             <include name="**/*.betwixt"/>
        </fileset>      
    </copy>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >
    
    <!-- Create the distribution directory -->
    <delete>
        <fileset dir="${dist}/photovault-latest" includes="**/*"/>

    </delete>
    <mkdir dir="${dist}/photovault-latest"/>

    <!-- Convert the CLASSPATH from Ant path structure to a form that can be 
    passed to MANIFEST Class-Path property -->
    <pathconvert property="runtime-path" pathsep=" ">
          <path refid="runtime.path"></path>
          <flattenmapper/>
    </pathconvert>    

    <!-- Create the jar file  -->
    <jar jarfile="${dist}/photovault-latest/photovault.jar">
      <manifest>
         <attribute name="Main-Class" value="photovault.swingui.Photovault"/>
         <attribute name="Built-By" value="${user.name}"/>
         <attribute name="Implementation-Version" value="build_${DSTAMP}"/>
         <attribute name="Class-Path" value="${runtime-path}"/>
      </manifest>
      <fileset dir="${build}">
          <exclude name="**/Test*.class"/>
      </fileset>

      <fileset dir="conf" includes="*"/>
    </jar>
    
    <!-- Copy needed JAR files to distribution directory -->
    <copy todir="${dist}/photovault-latest">
        <fileset refid="runtime.fileset"/>   
    </copy>
  </target>

    <target name="test" depends="dist">
      <delete dir="./${reports.test}/testresults"/>
      <mkdir dir="./${reports.test}/testresults"/>
      <junit fork="yes" dir="${basedir}" printsummary="yes">
	<sysproperty key="photovault.propFname" value="${junittest.properties}"/>
	<sysproperty key="photovault.configfile" value="${junittest.configfile}"/>      
        <sysproperty key="basedir" value="${basedir}"/>
        <formatter type="xml"/>
        <classpath>
           <path refid="project.class.path"/>
           <pathelement location="${build.dir}"/>
           <pathelement location="${conf.dir}"/>
        </classpath>
        <!--<test name="imginfo.PhotoInfoTest" outfile="${reports.test}/imginfo"/>-->
        <batchtest todir="${reports.test}/testresults">
           <fileset dir="build"> 
              <include name="**/Test_*.class"/>
              <!-- Exlude inner classes sinc ethese do not contain any test cases --> 
              <exclude name="**/*$$*.class"/>
           </fileset>
        </batchtest>
      </junit>

      <!-- Create a summary report -->
      <junitreport todir="${reports.test}">
        <fileset dir="${reports.test}/testresults">
           <include name="TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="./${reports.test}/html"/>
      </junitreport>

    </target>

    <!-- Checkstyle target -->
    <target name="checkstyle">
        <checkstyle config="conf/sun_checks.xml">
           <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain"/>
            <formatter type="xml" toFile="build/checkstyle_errors.xml"/>
        </checkstyle>
    </target>
    
    
    <path id="emma.lib" >
        <pathelement location="lib/emma.jar" />
        <pathelement location="lib/emma_ant.jar" />
    </path>
    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
    
    <target name="junit-coverage" depends="dist"
            description="Measures unit test coverage using Emma">
        <path id="instrpath">
            <pathelement path="build"/>
        </path>
        <delete dir="${build.instr.dir}"/>
        <mkdir dir="${build.instr.dir}"/>
        <delete file="${coverage.dir}/metadata.emma"/>
        <emma enabled="true" >
            <instr instrpathref="instrpath" destdir="${build.instr.dir}"	
                    metadatafile="${coverage.dir}/metadata.emma"
                    merge="true">
                  <filter excludes="*.Test_*"/>
            </instr>
        </emma>        
        <delete dir="./${reports.test}/testresults"/>
        <mkdir dir="./${reports.test}/testresults"/>
        <junit fork="yes" dir="${basedir}" printsummary="yes">
            <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=false" />     
            <jvmarg value="-Xmx256M"/>
            <sysproperty key="photovault.propFname" value="${junittest.properties}"/>
            <sysproperty key="basedir" value="${basedir}"/>
            <formatter type="xml"/>
            <classpath>
                <pathelement location="${build.instr.dir}"/>
                <path refid="project.class.path"/>
                <pathelement location="${build.dir}"/>
                <pathelement location="${conf.dir}"/>
            </classpath>
            <!--<test name="imginfo.PhotoInfoTest" outfile="${reports.test}/imginfo"/>-->
            <batchtest todir="${reports.test}/testresults">
                <fileset dir="build"> 
                    <include name="**/Test_*.class"/>
                    <!-- Exlude inner classes sinc ethese do not contain any test cases --> 
                    <exclude name="**/*$$*.class"/>
                </fileset>
            </batchtest>
        </junit>
        <emma enabled="true">
            <report sourcepath="${src}">
                <fileset dir="${basedir}/${coverage.dir}" >
                    <include name="*.emma" />
                </fileset>

                <txt outfile="${basedir}/${coverage.dir}/coverage.txt" />
                <html outfile="${basedir}/${coverage.dir}/coverage.html" />
            </report>
        </emma>
      <!-- Create a summary report -->
      <junitreport todir="${reports.test}">
        <fileset dir="${reports.test}/testresults">
           <include name="TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="./${reports.test}/html"/>
      </junitreport>
    </target>
    
  
    
  <target name="run" depends="dist">
        <java fork="true" classname="photovault.swingui.Photovault">
            <!-- Use large enough heap to fit also big images -->
            <jvmarg value="-Xmx256M"/>
            <classpath>
                <path refid="project.class.path"/>
            </classpath>
        </java> 
  </target>

  <target name="run-coverage" depends="dist">
        <path id="instrpath">
            <pathelement path="build"/>
        </path>
        <delete dir="${build.instr.dir}"/>
        <mkdir dir="${build.instr.dir}"/>
        <delete file="${coverage.dir}/metadata.emma"/>
        <emma enabled="true" >
            <instr instrpathref="instrpath" destdir="${build.instr.dir}"	
                    metadatafile="${coverage.dir}/metadata.emma"
                    merge="true">
                  <filter excludes="*.Test_*"/>
            </instr>
        </emma>        
        <delete dir="./${reports.test}/testresults"/>
        <mkdir dir="./${reports.test}/testresults"/>
        <java fork="true" classname="photovault.swingui.Photovault">
            <!-- Use large enough heap to fit also big images -->
            <jvmarg value="-Xmx256M"/>
            <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=true" />     
            <classpath>
                <pathelement location="${build.instr.dir}"/>
                <path refid="project.class.path"/>
                <pathelement location="${build.dir}"/>
                <pathelement location="${conf.dir}"/>
            </classpath>
        </java> 
        <emma enabled="true">
            <report sourcepath="${src}">
                <fileset dir="${basedir}/${coverage.dir}" >
                    <include name="*.emma" />
                </fileset>

                <txt outfile="${basedir}/${coverage.dir}/coverage.txt" />
                <html outfile="${basedir}/${coverage.dir}/coverage.html" />
            </report>
        </emma>      
  </target>
  
  <target name="debug" depends="compile" if="netbeans.home" description="Debug Project">  
    <nbjpdastart name="Photovault" addressproperty="jpda.address" transport="dt_socket">
     <classpath refid="project.class.path"/>

     <sourcepath refid="debug.sourcepath"/> 
   </nbjpdastart>
   <java fork="true" classname="photovault.swingui.Photovault">
    <jvmarg value="-Xdebug"/>
    <jvmarg value="-Xnoagent"/>
    <jvmarg value="-Djava.compiler=none"/>
    <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
    <classpath refid="project.class.path"/>
  </java>
</target>   

    <target name="debug-selected-files" depends="compile" if="netbeans.home" description="Debug a Single File">
       <fail unless="classname">Must set property 'classname'</fail>
       <nbjpdastart name="${classname}" addressproperty="jpda.address" transport="dt_socket">
          <classpath refid="project.class.path"/>
          <sourcepath refid="debug.sourcepath"/> 
       </nbjpdastart>
       <java classname="${classname}" fork="true">
          <jvmarg value="-Xdebug"/>
          <jvmarg value="-Xnoagent"/>
          <jvmarg value="-Djava.compiler=none"/>
          <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
          <classpath refid="project.class.path"/>
       </java>
     </target>

<target name="profile" depends="dist" description="Profile Project">
                <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
                <nbprofile classname="photovault.swingui.Photovault" dir="c:/Documents and Settings/harri/My Documents/projects/photovault">
                <classpath refid="project.class.path"/>
                <!--
                <jvmarg value="-agentpath:&quot;c:\program files\netbeans-4.0\profiler1\modules\profiler-ea-libs\deployed\jdk15\windows\profilerinterface.dll&quot;=&quot;\&quot;c:\program files\netbeans-4.0\profiler1\modules\profiler-ea-libs\&quot;&quot;,5140"/>
                
                -->
                </nbprofile>
</target>   
   
  <target name="doc">
    <javadoc packagenames = "*"
             destdir="docs/api"
	     sourcepath="src"
             author="true"
             version="true"
             use="true"
             windowtitle="Test API">

      <classpath refid="project.class.path"/>
      <doctitle><![CDATA[<h1>Photo archive</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2004 Harri Kaimio</i>]]></bottom>
      <tag name="todo" scope="all" description="To do:" />
      <link offline="true" href="http://java.sun.com/products/jdk/1.2/docs/api/" packagelistLoc="C:\tmp"/>
      <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
    </javadoc>
  </target>
  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
