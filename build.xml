<!--
  Copyright (c) 2006 Harri Kaimio
  
  This file is part of Photovault.

  Photovault is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  Photovault is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Photovault; if not, write to the Free Software Foundation,
  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
-->


<project name="Photovault" default="dist" basedir=".">
    <description>
        Photovault image organization system
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src/main/java"/>
  <property name="nsis-src" value="src/main/win32/installer"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="lib"  location="lib"/>
  <property name="basedir" location="."/>
  <property name="junittest.properties" value="junittest.properties"/>
  <property name="junittest.configfile" value="conf/junittest_config.xml"/>
  
  <property file="build.properties"/> 

   	
  <!-- Checkstyle ant task definition -->
  <!--taskdef resource="checkstyletask.properties"
            classpath="lib/checkstyle-all-4.0-beta6.jar"/-->
    
    <!-- SVN info task definition -->
  <taskdef name="svninfoproperties" classname="com.jwhitlock.ant.taskdefs.SvnInfoProperties" classpath="lib/svninfo_task.jar" />

      
  <path id="runtime.path">
      <fileset id="runtime.fileset" dir="${build.lib.dir}">
          <include name="db-ojb-1.0.4.jar"/>
          <include name="exif_extract.jar"/>
          <!-- <include name="jai_codec.jar"/>
          <include name="jai_core.jar"/>-->
          <include name="jai_imageio.jar"/>
          <include name="clibwrapper_jiio.jar"/>
          <include name="mysql-connector-java.jar"/>
          <include name="log4j-1.2.12.jar"/>
          <include name="commons-*.jar"/>
          <include name="antlr-2.7.5.jar"/>
          <include name="swing-layout-*.jar"/>
          <include name="DdlUtils-*"/>
          <include name="derby.jar"/>
          <include name="quaqua.jar"/>
      </fileset>
  </path>
  <path id="project.class.path">
    <fileset dir="${build.lib.dir}">
	<include name="**/*.jar"/>
        <exclude name="**/checkstyle*.jar"/>
    </fileset>
    <pathelement path="${java.class.path}/"/>
    <pathelement path="build"/>
    <pathelement path="conf"/>
    <pathelement path="src/main/resources"/>
  </path>

<path id="debug.sourcepath" >
    <pathelement path="src/main/java"/>
    <pathelement path="src/test/java"/>
</path>
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>

    <!-- Get SCM information & store it into buildinfo.properties -->
    <exec executable="svnversion" outputproperty="svnrevision" failifexecutionfails="no"> 
        <arg line="."/>
    </exec>
    <svninfoproperties dir="." verbose="true"/> 
    <echo>SVN revision: ${svnrevision}</echo>
    <echo>SVN URL: ${svn.info.url}</echo>
    <copy file="conf/buildinfo.template.properties" 
	    tofile="conf/buildinfo.properties"
	    overwrite="true">
        <filterset>
            <filter token="svnrevision" value="${svnrevision}"/>
	    <filter token="svn.info.url" value="${svn.info.url}"/>
	    <filter token="build.time" value="${DSTAMP}_${TSTAMP}"/>
	    <filter token="build.user" value="${user.name}"/>
	</filterset>
     </copy>
     <property file="conf/buildinfo.properties"/>   
  </target>

  <target name="compile" depends="init"
        description="Compile the source" >


    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="on" classpathref="project.class.path"/>
    <copy todir="${build}">
        <fileset dir="${src}">
             <include name="**/*.betwixt"/>
        </fileset>      
    </copy>
  </target>

  <target name="dist" depends="compile"
        description="Build Photovault JAR files" >
    
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/photovault-latest"/>
    <delete>
        <fileset dir="${dist}/photovault-latest" includes="**/*"/>

    </delete>


    <!-- Convert the CLASSPATH from Ant path structure to a form that can be 
    passed to MANIFEST Class-Path property -->
    <pathconvert property="runtime-path" pathsep=" ">
          <path refid="runtime.path"></path>
          <mapper type="flatten"/>
    </pathconvert>    

    <!-- Create the jar file  -->
    <jar jarfile="${dist}/photovault-latest/photovault.jar">
      <manifest>
         <attribute name="Main-Class" value="org.photovault.swingui.Photovault"/>
         <attribute name="Built-By" value="${user.name}"/>
         <attribute name="Implementation-Version" value="build_${DSTAMP}"/>
         <attribute name="Class-Path" value="${runtime-path}"/>
         <attribute name="SVN-revision" value="${svnrevision}"/>
         <attribute name="Build-time" value="${DSTAMP}_${TSTAMP}"/>
      </manifest>
      <fileset dir="${build}">
          <exclude name="**/Test*.class"/>
      </fileset>
      
      <!-- Include resources into the JAR -->
      <fileset dir="conf" includes="*"/>
      <fileset dir="src/main/resources" includes="*"/>
    </jar>
    
    <!-- Copy needed JAR files to distribution directory -->
    <copy todir="${dist}/photovault-latest">
        <fileset refid="runtime.fileset"/>   
    </copy>
    
  </target>

  <target name="win32-installer" depends="dist"
    description="Creates a WIN32 installer using NSIS">
      <fail message="The 'nsiscompiler' property must contain absolute path of NSIS compiler">
          <condition>
            <not>
                  <isset property="nsiscompiler"/>
            </not>
          </condition>
      </fail>
      <!-- Laynch4j task definition for creating windows .exe -->
      <taskdef name="launch4j"
        classname="net.sf.launch4j.ant.Launch4jTask"
        classpath="${launch4j.dir}/launch4j.jar
        :${launch4j.dir}/lib/xstream.jar" />
      
    <mkdir dir="${dist}/win32/installer"/>
    <copy file="${nsis-src}/photovault_installer.template.nsi" 
        tofile="${nsis-src}/photovault_installer.nsi"
        overwrite="true">
        <filterset> 
            <filtersfile file="conf/buildinfo.properties"/>
            <!-- TODO: This should not be hard coded 
            <filter token="version" value="0.5.0-dev"/>
            <filter token="svnrevision" value="${svnrevision}"/> -->
            <filter token="basedir" value="${basedir}"/> 
        </filterset>
    </copy>
    <copy file="src/main/win32/pv_launch4j.template.xml" 
        tofile="src/main/win32/pv_launch4j.xml"
        overwrite="true">
        <filterset> 
            <filtersfile file="conf/buildinfo.properties"/>
            <!--filter token="svnrev" value="${svn.info.rev}"/--> 
        </filterset>
    </copy>
    <launch4j configFile="src/main/win32/pv_launch4j.xml" 
        outfile="dist\win32\photovault.exe"
        jar="dist\photovault-latest\photovault.jar" />
        
    <exec executable="${nsiscompiler}">
        <arg line="${nsis-src}/photovault_installer.nsi"/>
    </exec>
  </target>
  
    <target name="test" depends="dist" description="Run JUnit tests">
      <delete dir="./${reports.test}/testresults"/>
      <mkdir dir="./${reports.test}/testresults"/>
      <mkdir dir="./build/test_volume"/>
      <junit fork="yes" dir="${basedir}" showoutput="yes" printsummary="yes">
	<sysproperty key="photovault.propFname" value="${junittest.properties}"/>
	<sysproperty key="photovault.configfile" value="${junittest.configfile}"/>      
        <sysproperty key="basedir" value="${basedir}"/>
        <formatter type="xml"/>
        <formatter usefile="false" type="brief"/>
        <classpath>
           <path refid="project.class.path"/>
           <pathelement location="${build.dir}"/>
           <pathelement location="${conf.dir}"/>
        </classpath>
        <!--<test name="imginfo.PhotoInfoTest" outfile="${reports.test}/imginfo"/>-->
        <batchtest todir="${reports.test}/testresults">
           <fileset dir="build"> 
              <include name="**/Test_*.class"/>
              <!-- Exlude inner classes since these do not contain any test cases --> 
              <exclude name="**/*$$*.class"/>
           </fileset>
        </batchtest>
      </junit>

      <!-- Create a summary report -->
      <junitreport todir="${reports.test}">
        <fileset dir="${reports.test}/testresults">
           <include name="TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="./${reports.test}/html"/>
      </junitreport>

    </target>

    <!-- Checkstyle target -->
    <target name="checkstyle">
        <checkstyle config="conf/sun_checks.xml">
           <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain"/>
            <formatter type="xml" toFile="build/checkstyle_errors.xml"/>
        </checkstyle>
    </target>
    
    
    <path id="emma.lib" >
        <pathelement location="lib/emma.jar" />
        <pathelement location="lib/emma_ant.jar" />
    </path>
    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
    
    <target name="junit-coverage" depends="dist"
            description="Measures unit test coverage using Emma">
        <path id="instrpath">
            <pathelement path="build"/>
        </path>
        <delete dir="${build.instr.dir}"/>
        <mkdir dir="${build.instr.dir}"/>
        <delete file="${coverage.dir}/metadata.emma"/>
        <emma enabled="true" >
            <instr instrpathref="instrpath" destdir="${build.instr.dir}"	
                    metadatafile="${coverage.dir}/metadata.emma"
                    merge="true">
                  <filter excludes="*.Test_*"/>
            </instr>
        </emma>        
        <delete dir="./${reports.test}/testresults"/>
        <mkdir dir="./${reports.test}/testresults"/>
        <junit fork="yes" dir="${basedir}" printsummary="yes">
            <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=false" />     
            <jvmarg value="-Xmx256M"/>
            <sysproperty key="photovault.propFname" value="${junittest.properties}"/>
            <sysproperty key="basedir" value="${basedir}"/>
            <formatter type="xml"/>
            <classpath>
                <pathelement location="${build.instr.dir}"/>
                <path refid="project.class.path"/>
                <pathelement location="${build.dir}"/>
                <pathelement location="${conf.dir}"/>
            </classpath>
            <!--<test name="imginfo.PhotoInfoTest" outfile="${reports.test}/imginfo"/>-->
            <batchtest todir="${reports.test}/testresults">
                <fileset dir="build"> 
                    <include name="**/Test_*.class"/>
                    <!-- Exlude inner classes sinc ethese do not contain any test cases --> 
                    <exclude name="**/*$$*.class"/>
                </fileset>
            </batchtest>
        </junit>
        <emma enabled="true">
            <report sourcepath="${src}">
                <fileset dir="${basedir}/${coverage.dir}" >
                    <include name="*.emma" />
                </fileset>

                <txt outfile="${basedir}/${coverage.dir}/coverage.txt" />
                <html outfile="${basedir}/${coverage.dir}/coverage.html" />
            </report>
        </emma>
      <!-- Create a summary report -->
      <junitreport todir="${reports.test}">
        <fileset dir="${reports.test}/testresults">
           <include name="TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="./${reports.test}/html"/>
      </junitreport>
    </target>
    
  
    
  <target name="run" depends="dist" description="Run Photovault">
        <java fork="true" classname="org.photovault.swingui.Photovault">
            <!-- Use large enough heap to fit also big images -->
            <jvmarg value="-Xmx256M"/>
            <classpath>
                <path refid="project.class.path"/>
            </classpath>
        </java> 
  </target>

  <target name="run-coverage" depends="dist">
        <path id="instrpath">
            <pathelement path="build"/>
        </path>
        <delete dir="${build.instr.dir}"/>
        <mkdir dir="${build.instr.dir}"/>
        <delete file="${coverage.dir}/metadata.emma"/>
        <emma enabled="true" >
            <instr instrpathref="instrpath" destdir="${build.instr.dir}"	
                    metadatafile="${coverage.dir}/metadata.emma"
                    merge="true">
                  <filter excludes="*.Test_*"/>
            </instr>
        </emma>        
        <delete dir="./${reports.test}/testresults"/>
        <mkdir dir="./${reports.test}/testresults"/>
        <java fork="true" classname="org.photovault.swingui.Photovault">
            <!-- Use large enough heap to fit also big images -->
            <jvmarg value="-Xmx256M"/>
            <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=true" />     
            <classpath>
                <pathelement location="${build.instr.dir}"/>
                <path refid="project.class.path"/>
                <pathelement location="${build.dir}"/>
                <pathelement location="${conf.dir}"/>
            </classpath>
        </java> 
        <emma enabled="true">
            <report sourcepath="${src}">
                <fileset dir="${basedir}/${coverage.dir}" >
                    <include name="*.emma" />
                </fileset>

                <txt outfile="${basedir}/${coverage.dir}/coverage.txt" />
                <html outfile="${basedir}/${coverage.dir}/coverage.html" />
            </report>
        </emma>      
  </target>
  
  <target name="debug" depends="compile" if="netbeans.home" description="Debug in Netbeans">  
    <nbjpdastart name="Photovault" addressproperty="jpda.address" transport="dt_socket">
     <classpath refid="project.class.path"/>

     <sourcepath refid="debug.sourcepath"/> 
   </nbjpdastart>
   <java fork="true" classname="org.photovault.swingui.Photovault">
    <jvmarg value="-Xmx256M"/>
    <jvmarg value="-Xdebug"/>
    <jvmarg value="-Xnoagent"/>
    <jvmarg value="-Djava.compiler=none"/>
    <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
    <classpath refid="project.class.path"/>
  </java>
</target>   

    <target name="debug-selected-files" depends="compile" if="netbeans.home" description="Debug a single file in Netbeans">
       <fail unless="classname">Must set property 'classname'</fail>
       <nbjpdastart name="${classname}" addressproperty="jpda.address" transport="dt_socket">
          <classpath refid="project.class.path"/>
          <sourcepath refid="debug.sourcepath"/> 
       </nbjpdastart>
       <java classname="${classname}" fork="true">
          <jvmarg value="-Xdebug"/>
          <jvmarg value="-Xnoagent"/>
          <jvmarg value="-Djava.compiler=none"/>
          <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
          <classpath refid="project.class.path"/>
       </java>
     </target>

     <!-- Profile Photovault in Netbeans 5 -->
    <target name="profile" depends="dist" description="Profile in Netbeans profiler">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
        <!-- Start the profiler & waint for Java VM -->
        <nbprofiledirect>
            <classpath refid="project.class.path"/>
        </nbprofiledirect>
        <!-- Start application. Use basically the same command as for running the application -->
        <java fork="true" classname="org.photovault.swingui.Photovault" jvm="${profiler.info.jvm}">
            <!-- Use large enough heap to fit also big images -->
            <jvmarg value="-Xmx256M"/>
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
            <classpath>
                <path refid="project.class.path"/>
            </classpath>
        </java> 
    </target>   
   
  <target name="doc" description="Create Javadoc documentation">
    <javadoc packagenames = "*"
             destdir="docs/api"
	     sourcepath="${src}"
             author="true"
             version="true"
             use="true"
             windowtitle="Test API">

      <classpath refid="project.class.path"/>
      <doctitle><![CDATA[<h1>Photo archive</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2004 Harri Kaimio</i>]]></bottom>
      <tag name="todo" scope="all" description="To do:" />
      <link offline="true" href="http://java.sun.com/products/jdk/1.2/docs/api/" packagelistLoc="C:\tmp"/>
      <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
    </javadoc>
  </target>
  <target name="clean"
        description="clean up" >    
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>

  <target name="dist-bin-tgz" depends="dist"
    description="Creates the binary distribution">
      <property name="version" value="${build.major}.${build.minor}.${build.patch}${build.version_shorttag}"/>
      <property name="tardir" value="photovault-${build.major}.${build.minor}.${build.patch}${build.version_shorttag}"/>
      <tar destfile="${dist}/photovault-${version}.tar.gz" compression="gzip">
          <tarfileset dir="${dist}/photovault-latest" prefix="${tardir}/lib">
              <!-- Exclude JAI libraries since their license is not GPL compatible -->
              <exclude name="**/jai_core.jar"/>
              <exclude name="**/jai_codec.jar"/>
          </tarfileset>
          <tarfileset dir="." prefix="${tardir}">
              <include name="relnotes.txt"/>
              <include name="LICENSE.txt"/>
          </tarfileset>
          <tarfileset dir="." fullpath="${tardir}/photovault" mode="755">
              <include name="photovault.sh"/>
          </tarfileset>
          <!-- Copy dcraw executables for all supported platforms to distribution 
               directory -->
          <tarfileset dir="${build.lib.dir}/linux-i386" prefix="${tardir}/lib/linux-i386" mode="755">
              <include name="dcraw*"/>
          </tarfileset>
          <tarfileset dir="${build.lib.dir}/win32-x86" prefix="${tardir}/lib/win32-x86">
              <include name="dcraw*"/>
          </tarfileset>
      </tar>
  </target>
  <target name="dist-src-tgz" depends="dist"
    description="Creates the source distribution tar file">
      <property name="version" value="${build.major}.${build.minor}.${build.patch}${build.version_shorttag}"/>
      <property name="tardir" value="photovault-${build.major}.${build.minor}.${build.patch}"/>
      <tar destfile="${dist}/photovault-src-${version}.tar.gz" compression="gzip">
          <tarfileset dir="src" prefix="${tardir}/src">
              <exclude name="**/.svn"/>
          </tarfileset>
          <tarfileset dir="lib" prefix="${tardir}/lib">
              <exclude name="**/.svn"/>
              <exclude name="**/jai_*"/>
          </tarfileset>
          <tarfileset dir="conf" prefix="${tardir}/conf">
              <exclude name="**/.svn"/>
          </tarfileset>
          <tarfileset dir="." prefix="${tardir}">
              <include name="relnotes.txt"/>
              <include name="LICENSE.txt"/>
              <include name="build.properties"/>
              <include name="forrest.properties"/>
          </tarfileset>
      </tar>
  </target>
  <target name="dist-testfiles-tgz" depends="dist"
    description="Crates the test file distribution tar file">
      <property name="version" value="${build.major}.${build.minor}.${build.patch}${build.version_shorttag}"/>
      <property name="tardir" value="photovault-${build.major}.${build.minor}.${build.patch}"/>
      <tar destfile="${dist}/photovault-testfiles-${version}.tar.gz" compression="gzip">
          <tarfileset dir="tests" prefix="${tardir}/tests">
              <exclude name="**/.svn"/>
          </tarfileset>
          <tarfileset dir="testfiles" prefix="${tardir}/testfiles">
              <exclude name="**/.svn"/>
          </tarfileset>
          <tarfileset dir="." prefix="${tardir}">
              <include name="relnotes.txt"/>
              <include name="LICENSE.txt"/>
          </tarfileset>
      </tar>
  </target>
  <target name="dist-files" depends="win32-installer,dist-bin-tgz,dist-src-tgz,dist-testfiles-tgz"
    description="Creates the distribution packages"/>

</project>
